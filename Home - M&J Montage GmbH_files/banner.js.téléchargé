
if (dr_generated_banner) {
  throw new Error("Cookie banner integration was included more than once!");
}

(function(cc) {

  // stop from running again, if accidently included more than once.
  if (cc.hasInitialised) return;

  var util = {
    // https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
    escapeRegExp: function(str) {
      return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
    },

    hasClass: function(element, selector) {
      var s = ' ';
      return (
        element.nodeType === 1 &&
        (s + element.className + s)
          .replace(/[\n\t]/g, s)
          .indexOf(s + selector + s) >= 0
      );
    },

    addClass: function(element, className) {
      element.className += ' ' + className;
    },

    removeClass: function(element, className) {
      var regex = new RegExp('\\b' + this.escapeRegExp(className) + '\\b');
      element.className = element.className.replace(regex, '');
    },

    interpolateString: function(str, callback) {
      var marker = /{{([a-z][a-z0-9\-_]*)}}/gi;
      return str.replace(marker, function(matches) {
        return callback(arguments[1]) || '';
      });
    },

    getCookie: function(name) {

      if (dr_cookiebanner_options) {
        if (dr_cookiebanner_options.cookieLocalStorage === true) {
          return localStorage.getItem(name);
        }
      }

      var value = '; ' + document.cookie;
      var parts = value.split('; ' + name + '=');
      var result = parts.length < 2
        ? undefined
        : parts
          .pop()
          .split(';')
          .shift();

      if (dr_cookiebanner_options) {
        dr_cookiebanner_options.log("GetCookie " + name + "=" + result);
      }
      return result;
    },

    setCookie: function(name, value, expiryDays, domain, path, secure) {

      if (dr_cookiebanner_options) {
        if (dr_cookiebanner_options.cookieLocalStorage === true) {
          if (value == null || value === "") {
            localStorage.removeItem(name);
          } else {
            localStorage.setItem(name, value);
          }
          return;
        }
      }

      var exdate = new Date();
      exdate.setDate(exdate.getDate() + (expiryDays || 365));

      var cookie = [
        name + '=' + value,
        'expires=' + exdate.toUTCString(),
        'path=' + (path || '/')
      ];

      if (domain) {
        cookie.push('domain=' + domain);
      }
      /*
      if (secure) {
        cookie.push('secure');
      }*/
      if (location.protocol === 'https:') {
        cookie.push('secure');
        cookie.push('SameSite=none');
      }

      document.cookie = cookie.join(';');

      if (dr_cookiebanner_options) {
        dr_cookiebanner_options.logJson("SetCookie", cookie);
      }
    },

    // only used for extending the initial options
    deepExtend: function(target, source) {
      for (var prop in source) {
        if (source.hasOwnProperty(prop)) {
          if (
            prop in target &&
            this.isPlainObject(target[prop]) &&
            this.isPlainObject(source[prop])
          ) {
            this.deepExtend(target[prop], source[prop]);
          } else {
            target[prop] = source[prop];
          }
        }
      }
      return target;
    },

    // only used for throttling the 'mousemove' event (used for animating the revoke button when `animateRevokable` is true)
    throttle: function(callback, limit) {
      var wait = false;
      return function() {
        if (!wait) {
          callback.apply(this, arguments);
          wait = true;
          setTimeout(function() {
            wait = false;
          }, limit);
        }
      };
    },

    // only used for hashing json objects (used for hash mapping palette objects, used when custom colours are passed through JavaScript)
    hash: function(str) {
      var hash = 0,
        i,
        chr,
        len;
      if (str.length === 0) return hash;
      for (i = 0, len = str.length; i < len; ++i) {
        chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0;
      }
      return hash;
    },

    normaliseHex: function(hex) {
      if (hex[0] == '#') {
        hex = hex.substr(1);
      }
      if (hex.length == 3) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      }
      return hex;
    },

    // used to get text colors if not set
    getContrast: function(hex) {
      hex = this.normaliseHex(hex);
      var r = parseInt(hex.substr(0, 2), 16);
      var g = parseInt(hex.substr(2, 2), 16);
      var b = parseInt(hex.substr(4, 2), 16);
      var yiq = (r * 299 + g * 587 + b * 114) / 1000;
      return yiq >= 128 ? '#000' : '#fff';
    },

    // used to change color on highlight
    getLuminance: function(hex) {
      var num = parseInt(this.normaliseHex(hex), 16),
        amt = 38,
        R = (num >> 16) + amt,
        B = ((num >> 8) & 0x00ff) + amt,
        G = (num & 0x0000ff) + amt;
      var newColour = (
        0x1000000 +
        (R < 255 ? (R < 1 ? 0 : R) : 255) * 0x10000 +
        (B < 255 ? (B < 1 ? 0 : B) : 255) * 0x100 +
        (G < 255 ? (G < 1 ? 0 : G) : 255)
      )
        .toString(16)
        .slice(1);
      return '#' + newColour;
    },

    isMobile: function() {
      return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
        navigator.userAgent
      );
    },

    isPlainObject: function(obj) {
      // The code "typeof obj === 'object' && obj !== null" allows Array objects
      return (
        typeof obj === 'object' && obj !== null && obj.constructor == Object
      );
    },

    traverseDOMPath: function(elem, className) {
      if (!elem || !elem.parentNode) return null;
      if (util.hasClass(elem, className)) return elem;

      return this.traverseDOMPath(elem.parentNode, className);
    }
  };

  // valid cookie values
  cc.status = {
    deny: 'deny',
    allow: 'allow',
    dismiss: 'dismiss'
  };

  // detects the `transitionend` event name
  cc.transitionEnd = (function() {
    var el = document.createElement('div');
    var trans = {
      t: 'transitionend',
      OT: 'oTransitionEnd',
      msT: 'MSTransitionEnd',
      MozT: 'transitionend',
      WebkitT: 'webkitTransitionEnd'
    };

    for (var prefix in trans) {
      if (
        trans.hasOwnProperty(prefix) &&
        typeof el.style[prefix + 'ransition'] != 'undefined'
      ) {
        return trans[prefix];
      }
    }
    return '';
  })();

  cc.hasTransition = !!cc.transitionEnd;

  // array of valid regexp escaped statuses
  var __allowedStatuses = Object.keys(cc.status).map(util.escapeRegExp);

  // contains references to the custom <style> tags
  cc.customStyles = {};

  cc.Popup = (function() {
    var defaultOptions = {
      // if false, this prevents the popup from showing (useful for giving to control to another piece of code)
      enabled: true,

      // optional (expecting a HTML element) if passed, the popup is appended to this element. default is `document.body`
      container: null,

      // defaults cookie options - it is RECOMMENDED to set these values to correspond with your server
      cookie: {
        // This is the name of this cookie - you can ignore this
        name: 'cookieconsent_status',

        // This is the url path that the cookie 'name' belongs to. The cookie can only be read at this location
        path: '/',

        // This is the domain that the cookie 'name' belongs to. The cookie can only be read on this domain.
        //  - Guide to cookie domains - https://www.mxsasha.eu/blog/2014/03/04/definitive-guide-to-cookie-domains/
        domain: '',

        // The cookies expire date, specified in days (specify -1 for no expiry)
        expiryDays: 365,

        // If true the cookie will be created with the secure flag. Secure cookies will only be transmitted via HTTPS.
        secure: false
      },

      // these callback hooks are called at certain points in the program execution
      onPopupOpen: function() {},
      onPopupClose: function() {},
      onInitialise: function(status) {},
      onStatusChange: function(status, chosenBefore) {},
      onRevokeChoice: function() {},
      onNoCookieLaw: function(countryCode, country) {},

      // each item defines the inner text for the element that it references
      content: {
        header: 'Cookies used on the website!',
        message:
          'This website uses cookies to ensure you get the best experience on our website.',
        dismiss: 'Got it!',
        allow: 'Allow cookies',
        deny: 'Decline',
        link: 'Learn more',
        href: 'https://cookiesandyou.com',
        close: '&#x274c;',
        target: '_blank',
        policy: 'Cookie Policy',
        mobilePolicy: "Mobile",
      },

      // This is the HTML for the elements above. The string {{header}} will be replaced with the equivalent text below.
      // You can remove "{{header}}" and write the content directly inside the HTML if you want.
      //
      //  - ARIA rules suggest to ensure controls are tabbable (so the browser can find the first control),
      //    and to set the focus to the first interactive control (https://w3c.github.io/using-aria/)
      elements: {
        header: '<span class="cc-header">{{header}}</span>&nbsp;',
        message:
          '<span id="cookieconsent:desc" class="cc-message">{{message}}</span>',
        messagelink:
          '<span id="cookieconsent:desc" class="cc-message">{{message}} <a aria-label="learn more about cookies" role=button tabindex="0" class="cc-link" href="{{href}}" rel="noopener noreferrer nofollow" target="{{target}}">{{link}}</a></span>',
        dismiss:
          '<a aria-label="dismiss cookie message" role=button tabindex="0" class="cc-btn cc-dismiss">{{dismiss}}</a>',
        allow:
          '<a aria-label="allow cookies" role=button tabindex="0"  class="cc-btn cc-allow">{{allow}}</a>',
        deny:
          '<a aria-label="deny cookies" role=button tabindex="0" class="cc-btn cc-deny">{{deny}}</a>',
        link:
          '<a aria-label="learn more about cookies" role=button tabindex="0" class="cc-link" href="{{href}}" rel="noopener noreferrer nofollow" target="{{target}}">{{link}}</a>',
        close:
          '<span aria-label="dismiss cookie message" role=button tabindex="0" class="cc-close">{{close}}</span>'

        //compliance: compliance is also an element, but it is generated by the application, depending on `type` below
      },

      // The placeholders {{classes}} and {{children}} both get replaced during initialisation:
      //  - {{classes}} is where additional classes get added
      //  - {{children}} is where the HTML children are placed
      window:
        '<div role="dialog" aria-live="polite" aria-label="cookieconsent" aria-describedby="cookieconsent:desc" class="cc-window {{classes}}"><!--googleoff: all-->{{children}}<!--googleon: all--></div>',

      // This is the html for the revoke button. This only shows up after the user has selected their level of consent
      // It can be enabled of disabled using the `revokable` option
      revokeBtn: '<div class="cc-revoke {{classes}}" aria-label="Show cookie consent settings" >{{policy}}</div>',

      // define types of 'compliance' here. '{{value}}' strings in here are linked to `elements`
      compliance: {
        info: '<div class="cc-compliance">{{dismiss}}</div>',
        'opt-in':
          '<div class="cc-compliance cc-highlight">{{deny}}{{allow}}</div>',
        'opt-out':
          '<div class="cc-compliance cc-highlight">{{deny}}{{allow}}</div>'
      },

      // select your type of popup here
      type: 'info', // refers to `compliance` (in other words, the buttons that are displayed)

      // define layout layouts here
      layouts: {
        // the 'block' layout tend to be for square floating popups
        basic: '{{messagelink}}{{compliance}}',
        'basic-close': '{{messagelink}}{{compliance}}{{close}}',
        'basic-header': '{{header}}{{message}}{{link}}{{compliance}}'

        // add a custom layout here, then add some new css with the class '.cc-layout-my-cool-layout'
        //'my-cool-layout': '<div class="my-special-layout">{{message}}{{compliance}}</div>{{close}}',
      },

      // default layout (see above)
      layout: 'basic',

      // this refers to the popup windows position. we currently support:
      //  - banner positions: top, bottom
      //  - floating positions: top-left, top-right, bottom-left, bottom-right
      //
      // adds a class `cc-floating` or `cc-banner` which helps when styling
      position: 'bottom', // default position is 'bottom'

      policyPosition: 'bottom', // MIKE: default popup policy position

      // Available styles
      //    -block (default, no extra classes)
      //    -edgeless
      //    -classic
      // use your own style name and use `.cc-theme-STYLENAME` class in CSS to edit.
      // Note: style "wire" is used for the configurator, but has no CSS styles of its own, only palette is used.
      theme: 'block',

      // The popup is `fixed` by default, but if you want it to be static (inline with the page content), set this to false
      // Note: by default, we animate the height of the popup from 0 to full size
      static: false,

      // if you want custom colours, pass them in here. this object should look like this.
      // ideally, any custom colours/themes should be created in a separate style sheet, as this is more efficient.
      //   {
      //     popup: {background: '#000000', text: '#fff', link: '#fff'},
      //     button: {background: 'transparent', border: '#f8e71c', text: '#f8e71c'},
      //     highlight: {background: '#f8e71c', border: '#f8e71c', text: '#000000'},
      //   }
      // `highlight` is optional and extends `button`. if it exists, it will apply to the first button
      // only background needs to be defined for every element. if not set, other colors can be calculated from it
      palette: null,

      // Some countries REQUIRE that a user can change their mind. You can configure this yourself.
      // Most of the time this should be false, but the `cookieconsent.law` can change this to `true` if it detects that it should
      revokable: false,

      // if true, the revokable button will tranlate in and out
      animateRevokable: true,

      // used to disable link on existing layouts
      // replaces element messagelink with message and removes content of link
      showLink: true,

      // set value as scroll range to enable
      dismissOnScroll: false,

      // set value as time in milliseconds to autodismiss after set time
      dismissOnTimeout: false,

      // set value as click anything on the page, excluding the `ignoreClicksFrom` below (if we click on the revoke button etc)
      dismissOnWindowClick: false,

      // If `dismissOnWindowClick` is true, we can click on 'revoke' and we'll still dismiss the banner, so we need exceptions.
      // should be an array of class names (not CSS selectors)
      ignoreClicksFrom: ['cc-revoke', 'cc-btn'], // already includes the revoke button and the banner itself

      // The application automatically decide whether the popup should open.
      // Set this to false to prevent this from happening and to allow you to control the behaviour yourself
      autoOpen: true,

      // By default the created HTML is automatically appended to the container (which defaults to <body>). You can prevent this behaviour
      // by setting this to false, but if you do, you must attach the `element` yourself, which is a public property of the popup instance:
      //
      //     var instance = cookieconsent.factory(options);
      //     document.body.appendChild(instance.element);
      //
      autoAttach: true,

      // simple whitelist/blacklist for pages. specify page by:
      //   - using a string : '/index.html'           (matches '/index.html' exactly) OR
      //   - using RegExp   : /\/page_[\d]+\.html/    (matched '/page_1.html' and '/page_2.html' etc)
      whitelistPage: [],
      blacklistPage: [],

      // If this is defined, then it is used as the inner html instead of layout. This allows for ultimate customisation.
      // Be sure to use the classes `cc-btn` and `cc-allow`, `cc-deny` or `cc-dismiss`. They enable the app to register click
      // handlers. You can use other pre-existing classes too. See `src/styles` folder.
      overrideHTML: null
    };

    function CookiePopup() {
      this.initialise.apply(this, arguments);
    }

    CookiePopup.prototype.initialise = function(options) {

      if (this.options) {
        this.destroy(); // already rendered
      }
      // ---- START MIKE: change in original code to prevent opening twice ----
      if (options._optionsWereUsed == true) {
        this.destroy(); // already rendered
        return;
      } else {
        options._optionsWereUsed = true;
      }
      // ---- END MIKE

      window.dr_isInitialized = false;

      // set options back to default options
      util.deepExtend((this.options = {}), defaultOptions);

      // merge in user options
      if (util.isPlainObject(options)) {
        util.deepExtend(this.options, options);
      }

      // configure debug logging py parameter
      if (this.options.configureDebugLogOutput) {
        this.options.configureDebugLogOutput();
      }

      if (this.options.dr_autoAcceptCookies) {
        if (this.options.dr_autoAcceptCookies == "allow") {
          window.CookiesOK = true;
        } else if (this.options.dr_autoAcceptCookies == "deny") {
          window.CookiesDeny = true;
        }
      }


      let scriptelm = document.currentScript;
      if (!scriptelm) {
        scriptelm = document.querySelector('script[nonce]')
      }

      if (scriptelm) {
        let snonce;
        if (scriptelm.nonce) {
          snonce = scriptelm.nonce;
        } else {
          snonce = scriptelm.getAttribute("nonce");
        }

        if (snonce) {
          this.options.cspNonce = snonce;
          window._drCspNonce = snonce;
        }
      }


      // check for bots, autoAllow if it is a bot (as there are no humans involved)
      var botPattern = "(googlebot\/|bot|Googlebot-Mobile|Googlebot-Image|Google favicon|Mediapartners-Google|bingbot|msnbot|teoma|ia_archiver|GingerCrawler|webcrawler|grub.org|UsineNouvelleCrawler|antibot|netresearchserver|speedy|fluffy|bibnum.bnf|findlink|msrbot|panscient|yacybot|AISearchBot|IOI|ips-agent|tagoobot|MJ12bot|dotbot|woriobot|yanga|buzzbot|mlbot|yandexbot|purebot|Linguee Bot|Voyager|CyberPatrol|voilabot|baiduspider|citeseerxbot|spbot|twengabot|postrank|turnitinbot|scribdbot|page2rss|sitebot|linkdex|Adidxbot|blekkobot|ezooms|dotbot|Mail.RU_Bot|discobot|heritrix|findthatfile|europarchive.org|NerdByNature.Bot|sistrix crawler|ahrefsbot|Aboundex|domaincrawler|wbsearchbot|summify|ccbot|edisterbot|seznambot|ec2linkfinder|gslfbot|aihitbot|intelium_bot|facebookexternalhit|yeti|RetrevoPageAnalyzer|lb-spider|sogou|lssbot|careerbot|wotbox|wocbot|ichiro|DuckDuckBot|lssrocketcrawler|drupact|webcompanycrawler|acoonbot|openindexspider|gnam gnam spider|web-archive-net.com.bot|backlinkcrawler|coccoc|integromedb|content crawler spider|toplistbot|seokicks-robot|it2media-domain-crawler|ip-web-crawler.com|siteexplorer.info|elisabot|proximic|changedetection|blexbot|arabot|WeSEE:Search|niki-bot|CrystalSemanticsBot|rogerbot|360Spider|psbot|InterfaxScanBot|Lipperhey SEO Service|CC Metadata Scaper|g00g1e.net|GrapeshotCrawler|urlappendbot|brainobot|fr-crawler|binlar|SimpleCrawler|Livelapbot|Twitterbot|cXensebot|smtbot|bnf.fr_bot|A6-Indexer|ADmantX|Facebot|Twitterbot|OrangeBot|memorybot|AdvBot|MegaIndex|SemanticScholarBot|ltx71|nerdybot|xovibot|BUbiNG|Qwantify|archive.org_bot|Applebot|TweetmemeBot|crawler4j|findxbot|SemrushBot|yoozBot|lipperhey|y!j-asr|Domain Re-Animator Bot|AddThis)";
      var re = new RegExp(botPattern, 'i');
      var userAgent = navigator.userAgent;
      var userAgentIsBot = false;
      if (re.test(userAgent)) {
        // the user agent is a crawler bot
        window.CookiesOK = true;
        userAgentIsBot = true;
      }

      if (webcareCmp) {
        webcareCmp.initConsent();
      }
      if (window.drExternalCmp) {
        window.drExternalCmp.init();
      }

      // remove cookies that are on the remove list
      if (dr_cookiebanner_options.dr_removeJsCookies != null && dr_cookie_erase) {
        dr_cookie_erase.cookies = dr_cookiebanner_options.dr_removeJsCookies;
        dr_cookie_erase.installService();
      }


      this.options.cookie.name = this.options.cookieConsentName;

      if (!this.hasConsented()) {
        // check for url parameters
        var pconsent = this.options.dr_getConsentFromUrlParameter();
        if (pconsent) {
          if (pconsent.drAllow) {
            this.setStatus("allow");
            dr_cookiebanner_options.dr_acceptedCategories = ["statistic", "marketing", "unclassified"];
          } else {
            this.setStatus("deny");
            dr_cookiebanner_options.dr_acceptedCategories = [];
            if (pconsent.statistic === true) {
              dr_cookiebanner_options.dr_acceptedCategories.push("statistic");
            }
            if (pconsent.marketing === true) {
              dr_cookiebanner_options.dr_acceptedCategories.push("marketing");
            }
            if (pconsent.unknown === true) {
              dr_cookiebanner_options.dr_acceptedCategories.push("unclassified");
            }
          }

          var c = this.options.cookie;
          if (c) {
            util.setCookie(
              this.options.cookieConsentModeName,
              JSON.stringify(dr_cookiebanner_options.dr_acceptedCategories),
              c.expiryDays,
              c.domain,
              c.path,
              c.secure
            );
          }
        }
      }

      // returns true if `onComplete` was called
      if (checkCallbackHooks.call(this)) {
        // user has already answered
        this.options.enabled = false;
      }

      // apply blacklist / whitelist
      if (arrayContainsMatches(this.options.blacklistPage, location.pathname)) {
        this.options.enabled = false;
      }
      if (arrayContainsMatches(this.options.whitelistPage, location.pathname)) {
        this.options.enabled = true;
      }

      // the full markup either contains the wrapper or it does not (for multiple instances)
      var cookiePopup = this.options.window
        .replace('{{classes}}', getPopupClasses.call(this).join(' '))
        .replace('{{children}}', getPopupInnerMarkup.call(this));

      // if user passes html, use it instead
      var customHTML = this.options.overrideHTML;
      if (typeof customHTML == 'string' && customHTML.length) {
        cookiePopup = customHTML;
      }

      if (userAgentIsBot != true) {
        if (cookiePopup && cookiePopup.length > 5) {
          if (cookiePopup[0] == 'h' && cookiePopup[1] == 't' && cookiePopup[2] == 't' && cookiePopup[3] == 'p') {
            this.dynamicLoad(cookiePopup);
          } else {
            this.initialiseWaitForCSS(cookiePopup);
          }
        } else {
          this.initialiseWaitForCSS(null);
        }
      } else {
        console.log("WebCare deactivated for Crawlers and Bots")
      }
    }

    CookiePopup.prototype.dynamicLoad =  function (contentUrl) {
      console.debug("Dynamically load " + contentUrl);

      var caller = this;

      var xhr = new XMLHttpRequest();
      xhr.open('GET', contentUrl);
      xhr.timeout = 5000;
      xhr.send();
      xhr.onload = function() {
        var success = false;
        if (xhr.status == 200) {
          if (xhr.response && xhr.response.length > 200) {
            success = true;
          }
        }

        if (success) {
          caller.initialiseWaitForCSS(xhr.response);
        } else {
          caller.initialiseWaitForCSS(null);
        }

      };

      xhr.onprogress = function(event) {
        /*
        if (event.lengthComputable) {
          console.log("Received + " + event.loaded + " of " + event.total +" bytes");
        } else {
          console.log("Received " + event.loaded + " bytes");
        }*/
      };

      xhr.onerror = function() {
        console.error("Could not load language version: " + contentUrl);
        caller.initialiseWaitForCSS(null);
      };

    }

    CookiePopup.prototype.initialiseWaitForCSS =  function (cookiePopup) {
      var caller = this;
      caller.initialise2(cookiePopup);
    }

    CookiePopup.prototype.initialise2 =  function (cookiePopup) {

      if (cookiePopup == null || cookiePopup.length < 200) {
        if (dr_generated_banner["en"] && dr_generated_banner["en"].length > 200) {
          cookiePopup = dr_generated_banner["en"];
        } else if (dr_generated_banner["de"] && dr_generated_banner["de"].length > 200) {
          cookiePopup = dr_generated_banner["de"];
        } else {
          cookiePopup = dr_generated_banner[0];
        }
      }

      // now we have to update CSP nonce in HTML code to allow inline styling and execution
      if (this.options.cspNonce) {
        cookiePopup = cookiePopup.replace(/__csp:replace_nonce__/g, this.options.cspNonce);
      }

      // if static, we need to grow the element from 0 height so it doesn't jump the page
      // content. we wrap an element around it which will mask the hidden content
      if (this.options.static) {
        // `grower` is a wrapper div with a hidden overflow whose height is animated
        var wrapper = appendMarkup.call(
          this,
          '<div class="cc-grower">' + cookiePopup + '</div>'
        );

        wrapper.style.display = ''; // set it to visible (because appendMarkup hides it)
        this.element = wrapper.firstChild; // get the `element` reference from the wrapper
        this.element.style.display = 'none';
        util.addClass(this.element, 'cc-invisible');
      } else {
        this.element = appendMarkup.call(this, cookiePopup);
      }

      // add custom logo if defined
      if (this.options.insertTopLogo != null && this.options.insertTopLogo.length > 0) {
        var insElm = document.getElementById("dr-insert-content");
        if (insElm) {
          insElm.innerHTML = this.options.insertTopLogo;
          util.removeClass(insElm, "dr-invisible-element");
        }

        insElm = document.getElementById("dr-pre-insert-content");
        if (insElm) {
          insElm.innerHTML = this.options.insertTopLogo;
          util.removeClass(insElm, "dr-invisible-element");
        }
      }

      this.options.dr_generateCountrySelectOptions();

      // associate all events in current banner with corresponding functions
      // this is a replacement for inline functions because of CSP rules
      dr_associateAllEventHandlersInBanner();

      applyAutoDismiss.call(this);


      if (this.options.cookieDomain) {
        if (this.options.cookieDomain.length > 0) {
          this.options.cookie.domain = this.options.cookieDomain;
        }
      }

      if (this.options.cookieConsentName) {
        if (this.options.cookieConsentName.length > 0) {
          this.options.cookie.name = this.options.cookieConsentName;
        }
      }

      applyRevokeButton.call(this);

      window.dr_isInitialized = true;

      if (this.options.autoOpen) {
        this.autoOpen();
      }
    };

    CookiePopup.prototype.destroy = function() {
      if (this.onButtonClick && this.element) {
        this.element.removeEventListener('click', this.onButtonClick);
        this.onButtonClick = null;
      }

      if (this.dismissTimeout) {
        clearTimeout(this.dismissTimeout);
        this.dismissTimeout = null;
      }

      if (this.onWindowScroll) {
        window.removeEventListener('scroll', this.onWindowScroll);
        this.onWindowScroll = null;
      }

      if (this.onWindowClick) {
        window.removeEventListener('click', this.onWindowClick);
        this.onWindowClick = null;
      }

      if (this.onMouseMove) {
        window.removeEventListener('mousemove', this.onMouseMove);
        this.onMouseMove = null;
      }

      if (this.element && this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
      }
      this.element = null;

      if (this.revokeBtn && this.revokeBtn.parentNode) {
        this.revokeBtn.parentNode.removeChild(this.revokeBtn);
      }
      this.revokeBtn = null;

      this.options = null;
    };

    CookiePopup.prototype.open = function(callback) {
      if (!this.element) return;

      if (!this.isOpen()) {
        if (this.options.animateBanner === false) {
          this.element.style.display = '';
          util.removeClass(this.element, 'cc-invisible');
        } else {
          if (cc.hasTransition) {
            this.fadeIn();
          } else {
            this.element.style.display = '';
          }
        }

        if (this.options.revokable) {
          this.toggleRevokeButton();
        }
        this.options.onPopupOpen.call(this);
      }

      return this;
    };

    CookiePopup.prototype.close = function(showRevoke) {
      if (!this.element) return;

      if (this.isOpen()) {
        if (this.options.animateBanner === false) {
          this.element.style.display = 'none';
        } else {
          if (cc.hasTransition) {
            this.fadeOut();
          } else {
            this.element.style.display = 'none';
          }
        }

        if (showRevoke && this.options.revokable) {
          this.toggleRevokeButton(true);
        }

        // execute tags with close activation mode
        if (window.drExternalCmp) {
          window.drExternalCmp.closegui(true);
        }
        this.options.dr_activateTags(this.options.dr_hasConsent("statistic"), this.options.dr_hasConsent("marketing"), true);
        if (window.drExternalCmp) {
          window.drExternalCmp.closegui(false);
        }

        this.options.onPopupClose.call(this);
      }

      // do redirect after consent decision
      if (dr_cookiebanner_options.onRedirectAfterConsent) {
        // call event callback instead of redirecting
        if (window.dr_redirectAfterConsentOption) {

          var c = dr_cookiebanner_options.dr_getConsentFromBanner(this.getStatus(), dr_cookiebanner_options.dr_acceptedCategories);
          parameters = dr_cookiebanner_options.dr_addConsentParameterToUrl(" ", c).substring(2);

          var o = {
            key: window.dr_redirectAfterConsentOption.key,
            description: window.dr_redirectAfterConsentOption.description,
            redirect: window.dr_redirectAfterConsentOption.redirect,
            consent: parameters
          }

          setTimeout(function () {
            dr_cookiebanner_options.onRedirectAfterConsent(o);
          }, 100);

        }
      } else {
       if (window.dr_redirectAfterConsent) {
          var redirectUrl = window.dr_redirectAfterConsent;

          var c = dr_cookiebanner_options.dr_getConsentFromBanner(this.getStatus(), dr_cookiebanner_options.dr_acceptedCategories);
          redirectUrl = dr_cookiebanner_options.dr_addConsentParameterToUrl(redirectUrl, c);

          setTimeout(function () {
            location.href = redirectUrl;
          }, 100);
        }
      }

      return this;
    };

    CookiePopup.prototype.fadeIn = function() {
      var el = this.element;

      if (!cc.hasTransition || !el) return;

      // This should always be called AFTER fadeOut (which is governed by the 'transitionend' event).
      // 'transitionend' isn't all that reliable, so, if we try and fadeIn before 'transitionend' has
      // has a chance to run, then we run it ourselves
      if (this.afterTransition) {
        afterFadeOut.call(this, el);
      }

      if (util.hasClass(el, 'cc-invisible')) {
        el.style.display = '';

        if (this.options.static) {
          var height = this.element.clientHeight;
          this.element.parentNode.style.maxHeight = height + 'px';
        }

        var fadeInTimeout = 20; // (ms) DO NOT MAKE THIS VALUE SMALLER. See below

        // Although most browsers can handle values less than 20ms, it should remain above this value.
        // This is because we are waiting for a "browser redraw" before we remove the 'cc-invisible' class.
        // If the class is remvoed before a redraw could happen, then the fadeIn effect WILL NOT work, and
        // the popup will appear from nothing. Therefore we MUST allow enough time for the browser to do
        // its thing. The actually difference between using 0 and 20 in a set timeout is neglegible anyway
        this.openingTimeout = setTimeout(
          afterFadeIn.bind(this, el),
          fadeInTimeout
        );
      }
    };

    CookiePopup.prototype.fadeOut = function() {
      var el = this.element;

      if (!cc.hasTransition || !el) return;

      if (this.openingTimeout) {
        clearTimeout(this.openingTimeout);
        afterFadeIn.bind(this, el);
      }

      if (!util.hasClass(el, 'cc-invisible')) {
        if (this.options.static) {
          this.element.parentNode.style.maxHeight = '';
        }

        this.afterTransition = afterFadeOut.bind(this, el);
        el.addEventListener(cc.transitionEnd, this.afterTransition);

        util.addClass(el, 'cc-invisible');
      }
    };

    CookiePopup.prototype.isOpen = function() {
      return (
        this.element &&
        this.element.style.display == '' &&
        (cc.hasTransition ? !util.hasClass(this.element, 'cc-invisible') : true)
      );
    };

    CookiePopup.prototype.toggleRevokeButton = function(show) {

      if (this.options.dr_button_policy_hide) {
        if (this.options.dr_button_policy_hide == "true") {
          show = false;
        }
      }

      if (this.revokeBtn) this.revokeBtn.style.display = show ? '' : 'none';
    };

    CookiePopup.prototype.revokeChoice = function(preventOpen) {
      this.options.enabled = true;
      this.clearStatus();

      this.options.onRevokeChoice.call(this);

      if (!preventOpen) {
        this.autoOpen();
      }
    };

    // returns true if the cookie has a valid value
    CookiePopup.prototype.hasAnswered = function(options) {
      return Object.keys(cc.status).indexOf(this.getStatus()) >= 0;
    };

    // returns true if the cookie indicates that consent has been given
    CookiePopup.prototype.hasConsented = function(options) {
      if (window.CookiesOK) {
        return true;
      }

      if (window.CookiesDeny) {
        return false;
      }
      var val = this.getStatus();
      return val == cc.status.allow || val == cc.status.dismiss;
    };

    // opens the popup if no answer has been given
    CookiePopup.prototype.autoOpen = function(options) {
      if (!this.hasAnswered() && this.options.enabled) {
        this.open();
      } else if (this.hasAnswered() && this.options.revokable) {
        this.toggleRevokeButton(true);
      }
    };

    CookiePopup.prototype.setStatus = function(status) {
      var c = this.options.cookie;
      var value = util.getCookie(c.name);
      var chosenBefore = Object.keys(cc.status).indexOf(value) >= 0;

      // if `status` is valid
      if (Object.keys(cc.status).indexOf(status) >= 0) {
        util.setCookie(
          c.name,
          status,
          c.expiryDays,
          c.domain,
          c.path,
          c.secure
        );

        this.options.onStatusChange.call(this, status, chosenBefore);
      } else {
        this.clearStatus();
      }
    };

    CookiePopup.prototype.getStatus = function() {
      return util.getCookie(this.options.cookie.name);
    };

    CookiePopup.prototype.clearStatus = function() {
      let c = this.options.cookie;

      util.setCookie(c.name, '', -1, c.domain, c.path);
      util.setCookie(c.name, "", -1, null, c.path);

      let cdomain = window.location.hostname;
      let maxCount = 10;
      while ((maxCount--) > 0) {
        let idx = cdomain.indexOf('.');
        if (idx < 0) {
          break;
        }
        try {
          util.setCookie(c.name, "", -1, cdomain, "/");
        } catch (e) { }
        cdomain = cdomain.substring(idx + 1);
      }
    };

    // This needs to be called after 'fadeIn'. This is the code that actually causes the fadeIn to work
    // There is a good reason why it's called in a timeout. Read 'fadeIn';
    function afterFadeIn(el) {
      this.openingTimeout = null;
      util.removeClass(el, 'cc-invisible');
    }

    // This is called on 'transitionend' (only on the transition of the fadeOut). That's because after we've faded out, we need to
    // set the display to 'none' (so there aren't annoying invisible popups all over the page). If for whenever reason this function
    // is not called (lack of support), the open/close mechanism will still work.
    function afterFadeOut(el) {
      el.style.display = 'none'; // after close and before open, the display should be none
      el.removeEventListener(cc.transitionEnd, this.afterTransition);
      this.afterTransition = null;
    }

    // this function calls the `onComplete` hook and returns true (if needed) and returns false otherwise
    function checkCallbackHooks() {
      var complete = this.options.onInitialise.bind(this);

      if (!window.navigator.cookieEnabled) {
        complete(cc.status.deny);
        return true;
      }

      if (window.CookiesOK || window.navigator.CookiesOK) {
        complete(cc.status.allow);
        return true;
      }

      if (window.CookiesDeny || window.navigator.CookiesDeny) {
        complete(cc.status.deny);
        return true;
      }

      var allowed = Object.keys(cc.status);
      var answer = this.getStatus();
      var match = allowed.indexOf(answer) >= 0;

      if (match) {
        complete(answer);
      }
      return match;
    }

    function getPositionClasses() {
      var positions = this.options.position.split('-'); // top, bottom, left, right
      var classes = [];

      // top, left, right, bottom
      positions.forEach(function(cur) {
        classes.push('cc-' + cur);
      });

      return classes;
    }


    function getPopupClasses() {
      var opts = this.options;
      var positionStyle =
        opts.position == 'top' || opts.position == 'bottom'
          ? 'banner'
          : 'floating';

      if (util.isMobile()) {
        positionStyle = 'floating';
      }

      var classes = [
        'cc-' + positionStyle, // floating or banner
        'cc-type-' + opts.type, // add the compliance type
        'cc-theme-' + opts.theme // add the theme
      ];

      if (opts.static) {
        classes.push('cc-static');
      }

      classes.push.apply(classes, getPositionClasses.call(this));

      // we only add extra styles if `palette` has been set to a valid value
      var didAttach = attachCustomPalette.call(this, this.options.palette);

      // if we override the palette, add the class that enables this
      if (this.customStyleSelector) {
        classes.push(this.customStyleSelector);
      }

      return classes;
    }

    function getPopupInnerMarkup() {
      var interpolated = {};
      var opts = this.options;

      // removes link if showLink is false
      if (!opts.showLink) {
        opts.elements.link = '';
        opts.elements.messagelink = opts.elements.message;
      }

      Object.keys(opts.elements).forEach(function(prop) {
        interpolated[prop] = util.interpolateString(
          opts.elements[prop],
          function(name) {
            var str = opts.content[name];
            return name && typeof str == 'string' && str.length ? str : '';
          }
        );
      });

      // checks if the type is valid and defaults to info if it's not
      var complianceType = opts.compliance[opts.type];
      if (!complianceType) {
        complianceType = opts.compliance.info;
      }

      // build the compliance types from the already interpolated `elements`
      interpolated.compliance = util.interpolateString(complianceType, function(
        name
      ) {
        return interpolated[name];
      });

      // checks if the layout is valid and defaults to basic if it's not
      var layout = opts.layouts[opts.layout];
      if (!layout) {
        layout = opts.layouts.basic;
      }

      return util.interpolateString(layout, function(match) {
        return interpolated[match];
      });
    }

    function appendMarkup(markup) {
      var opts = this.options;
      var div = document.createElement('div');
      var cont =
        opts.container && opts.container.nodeType === 1
          ? opts.container
          : document.body;

      if (cont) {
        // all OK
      } else {
        console.error("WebCare Integration Error: Please make sure to place the Cookie Banner Code in the BODY section of the page.")
      }

      div.innerHTML = markup;

      var el = div.children[0];

      el.style.display = 'none';

      if (util.hasClass(el, 'cc-window') && cc.hasTransition) {
        util.addClass(el, 'cc-invisible');
      }

      // save ref to the function handle so we can unbind it later
      this.onButtonClick = handleButtonClick.bind(this);

      el.addEventListener('click', this.onButtonClick);

      if (opts.autoAttach) {
        if (!cont.firstChild) {
          cont.appendChild(el);
        } else {
          cont.insertBefore(el, cont.firstChild);
        }
      }

      return el;
    }

    function handleButtonClick(event) {
      // returns the parent element with the specified class, or the original element - null if not found
      var btn = util.traverseDOMPath(event.target, 'cc-btn') || event.target;

      if (btn && btn.dataset) {
        if(btn.dataset["denymode"] === "strict") {
          // in this mode its not "save current checkbox settings" but deny statistic, marketing and unclassified cookies
          dr_enableCheckbox("statistic", false);
          dr_enableCheckbox("marketing", false);
          dr_enableCheckbox("unclassified", false);
        }
      }

      if (util.hasClass(btn, 'cc-btn')) {
        var matches = btn.className.match(
          new RegExp('\\bcc-(' + __allowedStatuses.join('|') + ')\\b')
        );
        var match = (matches && matches[1]) || false;

        if (match) {
          this.setStatus(match);
          this.close(true);
        }
      }
      if (util.hasClass(btn, 'cc-close')) {
        this.setStatus(cc.status.dismiss);
        this.close(true);
      }
      if (util.hasClass(btn, 'cc-revoke')) {
        this.revokeChoice();
      }
    }

    // I might change this function to use inline styles. I originally chose a stylesheet because I could select many elements with a
    // single rule (something that happened a lot), the apps has changed slightly now though, so inline styles might be more applicable.
    function attachCustomPalette(palette) {
      var hash = util.hash(JSON.stringify(palette));
      var selector = 'cc-color-override-' + hash;
      var isValid = util.isPlainObject(palette);

      this.customStyleSelector = isValid ? selector : null;

      if (isValid) {
        addCustomStyle(hash, palette, '.' + selector);
      }
      return isValid;
    }

    function addCustomStyle(hash, palette, prefix) {
      // only add this if a style like it doesn't exist
      if (cc.customStyles[hash]) {
        // custom style already exists, so increment the reference count
        ++cc.customStyles[hash].references;
        return;
      }

      var colorStyles = {};
      var popup = palette.popup;
      var button = palette.button;
      var highlight = palette.highlight;

      // needs background colour, text and link will be set to black/white if not specified
      if (popup) {
        // assumes popup.background is set
        popup.text = popup.text
          ? popup.text
          : util.getContrast(popup.background);
        popup.link = popup.link ? popup.link : popup.text;
        colorStyles[prefix + '.cc-window'] = [
          'color: ' + popup.text,
          'background-color: ' + popup.background
        ];
        colorStyles[prefix + '.cc-revoke'] = [
          'color: ' + popup.text,
          'background-color: ' + popup.background
        ];
        colorStyles[
          prefix +
            ' .cc-link,' +
            prefix +
            ' .cc-link:active,' +
            prefix +
            ' .cc-link:visited'
        ] = ['color: ' + popup.link];

        if (button) {
          // assumes button.background is set
          button.text = button.text
            ? button.text
            : util.getContrast(button.background);
          button.border = button.border ? button.border : 'transparent';
          colorStyles[prefix + ' .cc-btn'] = [
            'color: ' + button.text,
            'border-color: ' + button.border,
            'background-color: ' + button.background
          ];

          if (button.padding) {
            colorStyles[prefix + ' .cc-btn'].push('padding: ' + button.padding);
          }

          if (button.background != 'transparent') {
            colorStyles[
              prefix + ' .cc-btn:hover, ' + prefix + ' .cc-btn:focus'
            ] = [
              'background-color: ' +
                (button.hover || getHoverColour(button.background))
            ];
          }

          if (highlight) {
            //assumes highlight.background is set
            highlight.text = highlight.text
              ? highlight.text
              : util.getContrast(highlight.background);
            highlight.border = highlight.border
              ? highlight.border
              : 'transparent';
            colorStyles[prefix + ' .cc-highlight .cc-btn:first-child'] = [
              'color: ' + highlight.text,
              'border-color: ' + highlight.border,
              'background-color: ' + highlight.background
            ];
          } else {
            // sets highlight text color to popup text. background and border are transparent by default.
            colorStyles[prefix + ' .cc-highlight .cc-btn:first-child'] = [
              'color: ' + popup.text
            ];
          }
        }
      }

      // this will be interpretted as CSS. the key is the selector, and each array element is a rule
      var style = document.createElement('style');
      document.head.appendChild(style);

      // custom style doesn't exist, so we create it
      cc.customStyles[hash] = {
        references: 1,
        element: style.sheet
      };

      var ruleIndex = -1;
      for (var prop in colorStyles) {
        if (colorStyles.hasOwnProperty(prop)) {
          style.sheet.insertRule(
            prop + '{' + colorStyles[prop].join(';') + '}',
            ++ruleIndex
          );
        }
      }
    }

    function getHoverColour(hex) {
      hex = util.normaliseHex(hex);
      // for black buttons
      if (hex === '000000') {
        return '#222';
      }
      return util.getLuminance(hex);
    }

    function arrayContainsMatches(array, search) {
      for (var i = 0, l = array.length; i < l; ++i) {
        var str = array[i];
        // if regex matches or string is equal, return true
        if (
          (str instanceof RegExp && str.test(search)) ||
          (typeof str == 'string' && str.length && str === search)
        ) {
          return true;
        }
      }
      return false;
    }

    function applyAutoDismiss() {
      var setStatus = this.setStatus.bind(this);
      var close = this.close.bind(this);

      var delay = this.options.dismissOnTimeout;
      if (typeof delay == 'number' && delay >= 0) {
        this.dismissTimeout = window.setTimeout(function() {
          setStatus(cc.status.dismiss);
          close(true);
        }, Math.floor(delay));
      }

      var scrollRange = this.options.dismissOnScroll;
      if (typeof scrollRange == 'number' && scrollRange >= 0) {
        var onWindowScroll = function(evt) {
          if (window.pageYOffset > Math.floor(scrollRange)) {
            setStatus(cc.status.dismiss);
            close(true);

            window.removeEventListener('scroll', onWindowScroll);
            this.onWindowScroll = null;
          }
        };

        if (this.options.enabled) {
          this.onWindowScroll = onWindowScroll;
          window.addEventListener('scroll', onWindowScroll);
        }
      }

      var windowClick = this.options.dismissOnWindowClick;
      var ignoredClicks = this.options.ignoreClicksFrom;
      if (windowClick) {
        var onWindowClick = function(evt) {
          var isIgnored = false;
          var pathLen = evt.path.length;
          var ignoredLen = ignoredClicks.length;
          for (var i = 0; i < pathLen; i++) {
            if (isIgnored) continue;

            for (var i2 = 0; i2 < ignoredLen; i2++) {
              if (isIgnored) continue;

              isIgnored = util.hasClass(evt.path[i], ignoredClicks[i2]);
            }
          }

          if (!isIgnored) {
            setStatus(cc.status.dismiss);
            close(true);

            window.removeEventListener('click', onWindowClick);
            this.onWindowClick = null;
          }
        }.bind(this);

        if (this.options.enabled) {
          this.onWindowClick = onWindowClick;
          window.addEventListener('click', onWindowClick);
        }
      }
    }

    function applyRevokeButton() {
      // revokable is true if advanced compliance is selected
      if (this.options.type != 'info') this.options.revokable = true;
      // animateRevokable false for mobile devices
      if (util.isMobile()) {
        this.options.animateRevokable = false;
      }

      if (this.options.revokable) {
        if (this.options.position == "middle") {
          var classes = [];
          if (this.options.policyPosition === "top") {
            classes.push("cc-top");
          } else {
            classes.push("cc-bottom");
          }
        } else {
          var classes = getPositionClasses.call(this);
        }

        if (util.isMobile()) {
          if (this.options.revokeOnMobile === false) {
            classes.push('cc-hide-revoke');
          }
        }

        if (this.options.animateRevokable) {
          classes.push('cc-animate');
        }
        if (this.customStyleSelector) {
          classes.push(this.customStyleSelector);
        }

        var usePolicy = this.options.content.policy;
        if (util.isMobile() && this.options.content.mobilePolicy) {
          usePolicy = this.options.content.mobilePolicy;
        }

        if (this.options.useRevokeCookieIcon === "true") {
          usePolicy = this.options.content.mobilePolicy;
        }

        if (usePolicy) {
          // now we have to update CSP nonce in HTML/SVG code to allow inline styling (prevent FOUC)
          if (this.options.cspNonce) {
            usePolicy = usePolicy.replace(/__csp:replace_nonce__/g, this.options.cspNonce);
          }
        }

        var revokeBtn = this.options.revokeBtn
          .replace('{{classes}}', classes.join(' '))
          .replace('{{policy}}', usePolicy);


        this.revokeBtn = appendMarkup.call(this, revokeBtn);

        var btn = this.revokeBtn;
        if (this.options.animateRevokable) {
          var wait = false;
          var onMouseMove = util.throttle(function(evt) {
            var active = false;
            var minY = 20;
            var maxY = window.innerHeight - 20;

            if (util.hasClass(btn, 'cc-top') && evt.clientY < minY)
              active = true;
            if (util.hasClass(btn, 'cc-bottom') && evt.clientY > maxY)
              active = true;

            if (active) {
              if (!util.hasClass(btn, 'cc-active')) {
                util.addClass(btn, 'cc-active');
              }
            } else {
              if (util.hasClass(btn, 'cc-active')) {
                util.removeClass(btn, 'cc-active');
              }
            }
          }, 200);

          this.onMouseMove = onMouseMove;
          if (window.document.documentMode) {
            // IE of some version
            window.addEventListener('mousemove', onMouseMove);
          } else {
            window.addEventListener('mousemove', onMouseMove, {passive: true});
          }
        }
      }
    }

    return CookiePopup;
  })();


  // export utils (no point in hiding them, so we may as well expose them)
  cc.utils = util;

  // retrieves the current status of the consent by cookie and array
  // usage: window.cookieconsent.currentConsentStatus();
  cc.currentConsentStatus = function() {
    let status = null;
    let consentModeArray = [];
    if (this.utils && dr_cookiebanner_options) {
      status = this.utils.getCookie(dr_cookiebanner_options.cookieConsentName);
      consentModeArray = dr_cookiebanner_options.dr_acceptedCategories
    }

    let result = {
      tech: true, preferences: true, statistic: false, marketing: false, unknown: false, drAllow: false, drDeny: false
    };
    if (status === "allow") {
      result.statistic = true;
      result.marketing = true;
      result.unknown = true;
      result.drAllow = true;
    } else {
      if (consentModeArray) {
        for (let i=0; i < consentModeArray.length; i++) {
          if ("statistic" === consentModeArray[i]) {
            result.statistic = true;
          } else if ("marketing" === consentModeArray[i]) {
            result.marketing = true;
          } else if ("unclassified" === consentModeArray[i]) {
            result.unknown = true;
          }
        }
      }
    }
    return result;
  }

  // Initialize the banner
  cc.initialise = function(options, complete, error) {

    if (!complete) complete = function() {};
    if (!error) error = function() {};

    var allowed = Object.keys(cc.status);
    var answer = util.getCookie(options.cookieConsentName);
    var match = allowed.indexOf(answer) >= 0;

    // if they have already answered
    if (match) {
      complete(new cc.Popup(options));
      return;
    }

    options.revokable = true;
    options.dismissOnScroll = false;
    options.dismissOnTimeout = false;

    complete(new cc.Popup(options));

  };



  // prevent this code from being run twice
  cc.hasInitialised = true;


  window.cookieconsent = cc;
})(window.cookieconsent || {});


function dr_selectTab(id) {

  var selected = id;
  if (dr_hasClass("#dr_tab_" + id, "dr-overview-item-active")) {
    selected = -1;
  }

  for (var i=1; i<=7; i++) {
    if (i == selected || selected == -1) {
      // select tab
      dr_removeCssClass("#dr_tab_" + i, "dr-overview-item-inactive");
      dr_removeCssClass("#dr_tab_" + i +" .dr-overview-item-count", "dr-overview-item-count-inactive");



      if (selected == -1) {
        dr_removeCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-hide");
        dr_addCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-show");

        dr_removeCssClass("#dr_tab_" + i, "dr-overview-item-active");
        dr_addCssClass("#dr_tab_" + i + " .dr-arrow-id", "dr-overview-arrow-right");
        dr_removeCssClass("#dr_tab_" + i + " .dr-arrow-id", "dr-overview-arrow-right-inactive");
        dr_removeCssClass("#dr_tab_" + i + " .dr-arrow-id", "dr-overview-arrow-down");

        dr_removeCssClass("#dr-tab-" + i + "-details", "dr-tab-details-active");
      } else {
        dr_addCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-hide");
        dr_removeCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-show");

        dr_addCssClass("#dr_tab_" + i, "dr-overview-item-active");
        dr_removeCssClass("#dr_tab_" + i + " .dr-arrow-id", "dr-overview-arrow-right");
        dr_removeCssClass("#dr_tab_" + i + " .dr-arrow-id", "dr-overview-arrow-right-inactive");
        dr_addCssClass("#dr_tab_" + i + " .dr-arrow-id", "dr-overview-arrow-down");

        dr_addCssClass("#dr-tab-" + i + "-details", "dr-tab-details-active");
      }
    } else {
      // deselect tab
      dr_addCssClass("#dr_tab_" + i, "dr-overview-item-inactive");
      dr_addCssClass("#dr_tab_" + i +" .dr-overview-item-count", "dr-overview-item-count-inactive");
      dr_removeCssClass("#dr_tab_" + i, "dr-overview-item-active");
      dr_removeCssClass("#dr_tab_" + i + " .dr-arrow-id",  "dr-overview-arrow-down");
      dr_addCssClass("#dr_tab_" + i + " .dr-arrow-id", "dr-overview-arrow-right-inactive");
      dr_removeCssClass("#dr-tab-" + i + "-details", "dr-tab-details-active");
    }
  }
}

function dr_addCssClass(query, className) {
  var element, arr;

  var elements = dr_select(query);
  for (var i=0; i<elements.length; i++) {
    element = elements[i];
    if (element) {
      if (element.classList) {
        element.classList.add(className);
      }
    }
  }
}

function dr_removeCssClass(query, className) {
  var elements = dr_select(query);
  for (var i=0; i<elements.length; i++) {
    var element = elements[i];
    if (element) {
      if (element.classList) {
        element.classList.remove(className); // maybe IE9 incompatible
      }
    }
  }
}

function dr_hasClass(query, className) {
  var elements = dr_select(query);
  for (var i=0; i<elements.length; i++) {
    var element = elements[i];
    if (element) {
      if (element.classList) {
        if (element.classList.contains(className)) {
          return true;
        }
      }
    }
  }
  return false;
}

function dr_select(query) {
  var result = document.querySelectorAll(query);
  if (result) {
    return result;
  } else {
    return [];
  }
}

/**
 * Tool to reload all iframes on page (typically used when closing the consent banner)
 * @param conf Configuration (optional):
 *
 * {
 *   debugOutput: true | false,
 *   appendConsent: true | false,
 *   blacklist: [list of iframe urls or part of urls to ignore completely]
 *   whitelist: [list of iframe urls or part of urls to include] - null or undefined to include all urls except blacklisted
 *   whitelistAppendUrls: [list of urls to append to] - null or undefined to include all urls except blacklisted
 *   blacklistAppendUrls: [list of urls to not append to]
 * }
 *
 */
function dr_reloadAllIframesOnPage(conf) {
  var f_list = document.getElementsByTagName('iframe');
  if (f_list) {
    for (var i = 0; i < f_list.length; i++) {
      var f = f_list[i];
      if (f && f.src) {
        var doReload = true;
        var appendConsent = false;
        var debugOutput = false;

        if (conf) {
          if (conf.debugOutput === true) {
            debugOutput = true;
          }

          if (conf.appendConsent === true) {
            appendConsent = true;
          }

          if (conf.blacklist) {
            doReload = !dr_arrayFoundInUrl(conf.blacklist, f.src);
          }
          if (doReload === true) {
            if (conf.whitelist) {
              doReload = dr_arrayFoundInUrl(conf.whitelist, f.src);
            }
          }

          if (doReload === true) {
            if (conf.blacklistAppendUrls) {
              appendConsent = !dr_arrayFoundInUrl(conf.blacklistAppendUrls, f.src);
            }
            if (doReload === true) {
              if (conf.whitelistAppendUrls) {
                appendConsent = dr_arrayFoundInUrl(conf.whitelistAppendUrls, f.src);
              }
            }
          }

        }


        if (doReload === true) {
          var src = f.src;
          if (appendConsent === true) {
            src = dr_cookiebanner_options.dr_removeConsentParameterFromUrl(src);
            var status = null;
            if (window.cookieconsent && window.cookieconsent.utils) {
              status = window.cookieconsent.utils.getCookie(dr_cookiebanner_options.cookieConsentName);
            }

            var consent = dr_cookiebanner_options.dr_getConsentFromBanner(status, dr_cookiebanner_options.dr_acceptedCategories);
            src = dr_cookiebanner_options.dr_addConsentParameterToUrl(src, consent);
          }
          if (debugOutput === true) {
            console.debug("iFrame reload with url: " + src);
          }
          if (document._jestActive) {
            f.srcReload = true;
          }
          f.src = src;
        }
      }
    }
  }
}

/**
 * External function: adds current consent to any given url
 * @param url - url to add the consent to
 * @returns {*}
 */
function dr_filterUrlAddConsent(url) {
  var src = url;

  src = dr_cookiebanner_options.dr_removeConsentParameterFromUrl(src);
  var status = null;
  if (window.cookieconsent && window.cookieconsent.utils) {
    status = window.cookieconsent.utils.getCookie(dr_cookiebanner_options.cookieConsentName);
  }

  var consent = dr_cookiebanner_options.dr_getConsentFromBanner(status, dr_cookiebanner_options.dr_acceptedCategories);
  src = dr_cookiebanner_options.dr_addConsentParameterToUrl(src, consent);

  return src;
}

function dr_stringContains(haystack, needle) {
  if (haystack && needle) {
    if (haystack.search(new RegExp(needle, "i")) === -1) {
      return false;
    } else {
      return true;
    }
  } else {
    return false;
  }
}

function dr_arrayFoundInUrl(needleArray, url) {
  if (needleArray && Array.isArray(needleArray) && needleArray.length > 0 && url) {
    for (var i=0; i<needleArray.length; i++) {
      var part = needleArray[i];
      if (dr_stringContains(url, part)) {
        return true;
      }
    }
    return false;
  } else {
    return false;
  }
}


function dr_showCookiebar() {
  var cbar = document.getElementById("dr-cookieBar");
  var cshow = document.getElementById("dr-cookieShow");

  if (cbar && cshow) {
    cbar.style.display = "flex";
    cbar.style.display = "-ms-flexbox";
    cbar.style.display = "-webkit-box";
    cshow.style.display = "none";
  }
}

function dr_ol_showDetails() {
  var oneline = document.getElementById("dr_oneline-banner");
  var details = document.getElementById("dr_detailed-banner");

  if (oneline && details) {
    oneline.style.display = "none";
    details.style.display = "block";
  }
}

function dr_pre_showDetails() {
  var pre = document.getElementById("dr_pre-banner");
  var details = document.getElementById("dr_detailed-banner");

  var option = dr_cookiebanner_options.dr_getSelectedPreBannerOption();

  if (option) {
    window.dr_redirectAfterConsentOption = option;
    if (option.redirect) {
      window.dr_redirectAfterConsent = option.redirect;
    }
  }

  if (pre && details) {
    pre.style.display = "none";
    details.style.display = "block";
  }
}


function dr_pre_selectCountry() {
  var pre = document.getElementById("dr-selectCountry-input");
  var btn = document.getElementById("dr-selectCountry-btn");

  if (pre) {
    if (btn) {
      if (pre.value && pre.value !== "") {
        btn.style.visibility="visible";
      } else {

        btn.style.visibility="hidden";
      }
    }
  }
}

function dr_parseLinkUrl(url) {
  var result = {
    url: null,
    target:null
  };

  if (url) {
    var suffix = ";samewindow";
    if (url.length >=suffix.length && url.indexOf(suffix, url.length - suffix.length) !== -1) {
      url = url.substr(0, url.length - suffix.length);
      result.url = url;
      result.target = null;
    } else {
      result.url = url;
      result.target = "_blank";
    }

    if (result.url === "") {
      result.url = null;
    }
  }

  return result;
}

function dr_openNewWindow(url) {
  var openUrl = dr_parseLinkUrl(url);
  if (openUrl && openUrl.url != null) {
    if (openUrl.target == null) {
      location.href = openUrl.url;
    } else {
      window.open(openUrl.url);
    }
  }
}

function dr_removePrefix(str, prefix) {
  if (str === null || prefix === null) {
    return str;
  }
  return str.startsWith(prefix) ? str.substring(prefix.length) : str;
}

function dr_removeWebCacheBasePath(url) {
  return dr_removePrefix(url, "https://webcache-eu.datareporter.eu/c/");
}

function dr_loadWithDocViewer(docPath) {

  if (typeof window.drShowDocumentViewer === 'function') {
    window.drShowDocumentViewer(docPath);

  } else {
    let exelist = [];
    let loaderCode = "window.drShowDocumentViewer('" + docPath + "');";
    exelist.push({type: "exe", script: {text: loaderCode }, done: false, removeAfterExe: false});

    dr_loadJs("https://webcachex-eu.datareporter.eu/docview/v1/docview.js", exelist);
  }
}

function dr_openPrivacyLink(url) {

  if (dr_cookiebanner_options.openPrivacyLinkInDocViewer === true
      && dr_cookiebanner_options.applicationPath && dr_cookiebanner_options.applicationPath.length > 0) {

    let docPath = dr_removeWebCacheBasePath(dr_cookiebanner_options.applicationPath) + "privacynotice";
    dr_loadWithDocViewer(docPath)

  } else {

    if (dr_cookiebanner_options.privacyLinkUrl) {
      if (dr_cookiebanner_options.privacyLinkUrl.length > 0) {
        url = dr_cookiebanner_options.privacyLinkUrl;
      }
    }
    dr_openNewWindow(url);
  }
}

function dr_openImprintLink(url) {

  if (dr_cookiebanner_options.openImprintLinkInDocViewer === true
      && dr_cookiebanner_options.companyPath && dr_cookiebanner_options.companyPath.length > 0) {

    let docPath = dr_removeWebCacheBasePath(dr_cookiebanner_options.companyPath) + "imprint";
    dr_loadWithDocViewer(docPath)

  } else {

    if (dr_cookiebanner_options.imprintLinkUrl) {
      if (dr_cookiebanner_options.imprintLinkUrl.length > 0) {
        url = dr_cookiebanner_options.imprintLinkUrl;
      }
    }
    dr_openNewWindow(url);
  }
}



function dr_changeCheckbox(cb, type) {

  var headlineCb = document.getElementById("dr-cb-headline-" + type);
  var detailsCb = document.getElementById("dr-cb-details-" + type);

  if (headlineCb) {
    if (headlineCb.checked !== cb.checked) {
      headlineCb.checked = cb.checked;
    }
  }

  if (detailsCb) {
    if (detailsCb.checked !== cb.checked) {
      detailsCb.checked = cb.checked;
    }
  }

}

function dr_enableCheckbox(type, enable) {

  var headlineCb = document.getElementById("dr-cb-headline-" + type);
  var detailsCb = document.getElementById("dr-cb-details-" + type);

  if (headlineCb) {
    headlineCb.checked = enable;
  }

  if (detailsCb) {
      detailsCb.checked = enable;
  }
}


function dr_onShowCategoryDetailsHide() {
  var cat = document.getElementById("dr-tab-category-details");
  if (cat) {
    if (cat.style.display === "block") {
      cat.style.display = "none";

      dr_removeCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-hide");
      dr_addCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-show");

    } else {
      cat.style.display = "block";

      dr_addCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-hide");
      dr_removeCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-show");

      // only hide details button in non editor mode
      if (window.dr_webcare_editor_active !== "true") {
        var details = document.querySelectorAll(".cc-banner-hidden .cc-details");
        if (details && details.length > 0) {
          for (var i = 0; i < details.length; i++) {
            details[i].style.display = "none";
          }
        }

        var compliance = document.querySelector(".cc-banner-hidden .dr-flex-centered");
        if (compliance) {
          compliance.style.justifyContent = "flex-start";
          compliance.style.alignContent = "flex-start";
        }
      }
    }
  }
}

function dr_onShowCategoryDetails() {
  var cat = document.getElementById("dr-tab-category-details");

  if (cat) {
    if (cat.style.display === "block") {
      cat.style.display = "none";
      dr_removeCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-hide");
      dr_addCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-show");

      dr_removeCssClass(".dr-btn-show-more > span.dr-open-arrow", "dr-open-arrow-status-open");
      dr_removeCssClass(".dr-btn-show-more-mobile > span.dr-open-arrow", "dr-open-arrow-status-open");
      dr_removeCssClass(".dr-btn-show-more-nocat > span.dr-open-arrow", "dr-open-arrow-status-open");
    } else {
      cat.style.display = "block";
      dr_addCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-hide");
      dr_removeCssClass(".cc-window .dr-hide-on-detail", "dr-hide-on-detail-show");

      dr_addCssClass(".dr-btn-show-more > span.dr-open-arrow", "dr-open-arrow-status-open");
      dr_addCssClass(".dr-btn-show-more-mobile > span.dr-open-arrow", "dr-open-arrow-status-open");
      dr_addCssClass(".dr-btn-show-more-nocat > span.dr-open-arrow", "dr-open-arrow-status-open");
    }

  }
}

function dr_showCategoryTableDetails(type) {
  let tabs = ["tech", "statistic", "marketing", "unclassified",];
  for (var i=0; i< tabs.length; i++) {
    var tb = document.getElementById("dr-category-table-" + tabs[i]);
    if (tb) {
      var openState = false;
      if (type === tabs[i]) {
        if (tb.style.display === "block") {
          tb.style.display = "none";
        } else {
          tb.style.display = "block";
          openState = true;
        }
      } else {
        tb.style.display = "none";
      }

      if (openState) {
        dr_addCssClass("#dr-open-link-" + tabs[i] + " > span", "dr-open-arrow-status-open");
      } else {
        dr_removeCssClass("#dr-open-link-" + tabs[i] + " > span", "dr-open-arrow-status-open");
      }

    }
  }
}

function dr_revokeChoice() {
  var elements = document.getElementsByClassName("cc-revoke");
  if (elements) {
    for (var i=0; i<elements.length; i++) {
      if (elements[i]) {
        elements[i].click();
      }
    }
  }
}

function dr_denyChoice() {
  var elements = document.getElementsByClassName("cc-deny");
  if (elements) {
    for (var i=0; i<elements.length; i++) {
      if (elements[i]) {
        elements[i].click();
      }
    }
  }
}

function dr_allowChoice() {
  var elements = document.getElementsByClassName("cc-allow");
  if (elements) {
    for (var i=0; i<elements.length; i++) {
      if (elements[i]) {
        elements[i].click();
      }
    }
  }
}

function dr_associateEventHandler(id, type, handler, dataParameterName) {
  var helem = document.getElementById(id);
  if (helem) {
    if (dataParameterName) {
      // has a data-<dataParameterName> attribute that will be sent to handler
      var pcontent = helem.dataset[dataParameterName];
      if (pcontent) {
        helem.addEventListener(type, function (e) {
          handler(pcontent);
          e.preventDefault();
        })
      } else {
        helem.addEventListener(type, function(e) {
          handler();
          e.preventDefault();
        });
      }
    } else {
      helem.addEventListener(type, function(e) {
        handler();
        e.preventDefault();
      });
    }
  }
}

function dr_associateCheckboxEventHandler(id, handler, category) {
  var helem = document.getElementById(id);
  if (helem) {
    var drcat = category;
    helem.addEventListener("change", function(e) {
      handler(helem, drcat);
      e.preventDefault();
    });
  }
}


function dr_associateAllEventHandlersInBanner() {
  // Global Buttons/Links
  dr_associateEventHandler("dr-privacylink-id", "click", dr_openPrivacyLink, "url");
  dr_associateEventHandler("dr-imprintlink-id", "click", dr_openImprintLink, "url");


  // Infobanner Buttons
  dr_associateEventHandler("dr-infobanner-btn-show-more-nocat", "click", dr_onShowCategoryDetails);
  dr_associateEventHandler("dr-infobanner-show-tech-details-id", "click", dr_showCategoryTableDetails, "category");
  dr_associateEventHandler("dr-infobanner-show-statistic-details-id", "click", dr_showCategoryTableDetails, "category");
  dr_associateEventHandler("dr-infobanner-show-marketing-details-id", "click", dr_showCategoryTableDetails, "category");
  dr_associateEventHandler("dr-infobanner-show-unclassified-details-id", "click", dr_showCategoryTableDetails, "category");

  // Category Banner
  dr_associateEventHandler("dr-categorybanner-btn-show-more-mobile", "click", dr_onShowCategoryDetails);
  dr_associateEventHandler("dr-categorybanner-btn-show-more-desktop", "click", dr_onShowCategoryDetails);

  dr_associateEventHandler("dr-categorybanner-show-tech-details-id", "click", dr_showCategoryTableDetails, "category");
  dr_associateEventHandler("dr-categorybanner-show-statistic-details-id", "click", dr_showCategoryTableDetails, "category");
  dr_associateEventHandler("dr-categorybanner-show-marketing-details-id", "click", dr_showCategoryTableDetails, "category");
  dr_associateEventHandler("dr-categorybanner-show-unclassified-details-id", "click", dr_showCategoryTableDetails, "category");

  dr_associateCheckboxEventHandler("dr-cb-headline-statistic", dr_changeCheckbox, "statistic");
  dr_associateCheckboxEventHandler("dr-cb-details-statistic", dr_changeCheckbox, "statistic");
  dr_associateCheckboxEventHandler("dr-cb-headline-marketing", dr_changeCheckbox, "marketing");
  dr_associateCheckboxEventHandler("dr-cb-details-marketing", dr_changeCheckbox, "marketing");
  dr_associateCheckboxEventHandler("dr-cb-headline-unclassified", dr_changeCheckbox, "unclassified");
  dr_associateCheckboxEventHandler("dr-cb-details-unclassified", dr_changeCheckbox, "unclassified");

  // Detailed banner
  dr_associateEventHandler("dr_tab_1", "click", dr_selectTab, "tabid");
  dr_associateEventHandler("dr_tab_2", "click", dr_selectTab, "tabid");
  dr_associateEventHandler("dr_tab_3", "click", dr_selectTab, "tabid");
  dr_associateEventHandler("dr_tab_4", "click", dr_selectTab, "tabid");
  dr_associateEventHandler("dr_tab_5", "click", dr_selectTab, "tabid");
  dr_associateEventHandler("dr_tab_6", "click", dr_openPrivacyLink, "url");
  dr_associateEventHandler("dr_tab_7", "click", dr_openImprintLink, "url");

  // Hidden Category Banner
  dr_associateEventHandler("dr-hiddencat-btn-show-more-hide", "click", dr_onShowCategoryDetailsHide);
  dr_associateEventHandler("dr-hiddencat-show-tech-details-id", "click", dr_showCategoryTableDetails, "category");
  dr_associateEventHandler("dr-hiddencat-show-statistic-details-id", "click", dr_showCategoryTableDetails, "category");
  dr_associateEventHandler("dr-hiddencat-show-marketing-details-id", "click", dr_showCategoryTableDetails, "category");
  dr_associateEventHandler("dr-hiddencat-show-unclassified-details-id", "click", dr_showCategoryTableDetails, "category");


  // Oneline Banner
  dr_associateEventHandler("dr-oneline-btn-show-more", "click", dr_ol_showDetails);
  dr_associateEventHandler("dr-oneline-btn-show-more-alt", "click", dr_ol_showDetails);
  dr_associateEventHandler("dr-oneline-privacylink-id", "click", dr_openPrivacyLink, "url");
  dr_associateEventHandler("dr-oneline-imprintlink-id", "click", dr_openImprintLink, "url");

  // Countryselect pre-banner
  dr_associateEventHandler("dr-selectCountry-input", "change", dr_pre_selectCountry);
  dr_associateEventHandler("dr-selectCountry-btn", "click", dr_pre_showDetails);


}

var dr_swarmCrawler = {

  siteInfo : {
    version:1,
    protocol: null,
    domain: null,
    port: null,
    path: null,
    cookies: [],
    scripts: [],
    stylesheets: [],
  },

  activate : function() {
    dr_cookiebanner_options.log("SC.activate()");

    dr_swarmCrawler.gatherSiteInfo();
    dr_cookiebanner_options.logJson("SC: SiteInfo", dr_swarmCrawler.siteInfo);

    /*
    let url = "https://swarmcrawler.datareporter.eu/v1/CrowdCrawler/register";
    if (dr_cookiebanner_options.swarmCrawlerVersion === 2) {
      url = "https://swarmcrawler.datareporter.eu/v1/swarmcrawler-redirect";
    } */
    let url = "https://swarmcrawler.datareporter.eu/v1/swarmcrawler-redirect";

    try {
      let xhr = new XMLHttpRequest();
      xhr.open('PUT', url, true);
      xhr.setRequestHeader('Content-Type', 'application/json;  charset=utf-8');
      xhr.setRequestHeader('x-api-key', '6txg8Su4Zy1bD6jhFbAMfEeP2XrRk546e5XsqoVi');
      xhr.timeout = 5000;
      xhr.onload = function () {
        // do nothing
      };
      xhr.send(JSON.stringify(dr_swarmCrawler.siteInfo));
    } catch (e) {
      dr_cookiebanner_options.log("SC.error: " + e);
    }
  },

  gatherSiteInfo: function() {
    dr_cookiebanner_options.log("SC.gatherSiteInfo()");

    var server = [location.protocol, '//', location.host].join('');

    dr_swarmCrawler.siteInfo.protocol = location.protocol;
    dr_swarmCrawler.siteInfo.domain = location.hostname;
    dr_swarmCrawler.siteInfo.port = location.port;
    dr_swarmCrawler.siteInfo.path = location.pathname;

    // gather cookies
    let theCookies = document.cookie.split(';');
    for (let i = 0; i < theCookies.length; i++) {
      var cname = theCookies[i].split('=');
      if (cname && cname.length > 0) {
        var drcookieName = dr_swarmCrawler.cookieOK(cname[0]);
        if (drcookieName !== false) {
          dr_swarmCrawler.addStringToArray(drcookieName, dr_swarmCrawler.siteInfo.cookies);
        }
      }
    }

    // gather loaded scripts
    let scripts = document.getElementsByTagName('script');
    if (scripts && scripts.length > 0) {
      for (let i = 0; i < scripts.length; i++) {
        if (scripts[i].src) {
          // only locals
          if (!dr_swarmCrawler.startsWith(scripts[i].src, server, 0)) {
            if (dr_swarmCrawler.scriptOK(scripts[i].src)) {
              dr_swarmCrawler.addStringToArray(dr_swarmCrawler.getHostPathFromUrl(scripts[i].src), dr_swarmCrawler.siteInfo.scripts);
            }
          }
        }
      }
    }

    // gather loaded iframes as scripts
    let iframes = document.getElementsByTagName('iframe');
    if (iframes && iframes.length > 0) {
      for (let i = 0; i < iframes.length; i++) {
        if (iframes[i].src) {
          // only locals
          if (!dr_swarmCrawler.startsWith(iframes[i].src, server, 0)) {
            if (dr_swarmCrawler.iframeOK(iframes[i].src)) {
              dr_swarmCrawler.addStringToArray("iframe:" + dr_swarmCrawler.getHostPathFromUrl(iframes[i].src), dr_swarmCrawler.siteInfo.scripts);
            }
          }
        }
      }
    }

    // gather loaded stylesheets
    let stylesheets = document.getElementsByTagName('link');
    if (stylesheets && stylesheets.length > 0) {
      for (var i = 0; i < stylesheets.length; i++) {
        if (stylesheets[i].href) {
          // only locals
          if (stylesheets[i].rel === "stylesheet") {
            if (!dr_swarmCrawler.startsWith(stylesheets[i].href, server, 0)) {
              if (dr_swarmCrawler.styleOK(stylesheets[i].href)) {
                dr_swarmCrawler.addStringToArray(dr_swarmCrawler.getHostPathFromUrl(stylesheets[i].href), dr_swarmCrawler.siteInfo.stylesheets)
              }
            }
          }
        }
      }
    }
  },

  cookieOK : function (name) {
    if (name) {
      name = dr_swarmCrawler.trim(name);
      if (dr_swarmCrawler.startsWith(name, "gd15")) {
        return "gd15";
      }
      if (dr_swarmCrawler.startsWith(name, "gd16")) {
        return "gd16";
      }
      if (dr_swarmCrawler.startsWith(name, "__ZEHIC")) {
        return "__ZEHIC";
      }
      if (dr_swarmCrawler.startsWith(name, "__zjc")) {
        return "__zjc";
      }

      if (name === "m") { // stripe cookie
        return name;
      }
      if (name.length <= 1) {
        return false;
      }
    } else {
      return false;
    }
    return name;
  },

  scriptOK : function (name) {
    if (name) {
      name = dr_swarmCrawler.trim(name);
      if (name.length <= 1) {
        return false;
      }
    } else {
      return false;
    }
    return true;
  },

  iframeOK : function (name) {
    if (name) {
      name = dr_swarmCrawler.trim(name);
      if (name.length <= 1) {
        return false;
      }
    } else {
      return false;
    }
    return true;
  },

  styleOK : function (name) {
    if (name) {
      name = dr_swarmCrawler.trim(name);
      if (name.length <= 1) {
        return false;
      }
    } else {
      return false;
    }
    return true;
  },

  getHostPathFromUrl : function(url) {
    if (url == null || url.length === 0) {
      return null;
    }

    if (url) {
      var param = url.indexOf('?');
      if (param > 0) {
        url = url.substring(0, param);
      }

      param = url.indexOf('#');
      if (param > 0) {
        url = url.substring(0, param);
      }

      param = url.indexOf(';');
      if (param > 0) {
        url = url.substring(0, param);
      }
    }

    return url;
  },

  // utility function
  startsWith : function(str, searchString, position) {
    position = position || 0;
    return str.indexOf(searchString, position) === position;
  },

  trim : function(x) {
    if (x != null) {
      return x.replace(/^\s+|\s+$/gm, '');
    } else {
      return null;
    }

  },

  addStringToArray: function(str, arr) {
    if (arr != null && str != null) {
       if (arr.indexOf(str) < 0) {
         arr.push(str);
       }
    }
  }


}


function dr_initIntegrationTags(tags) {
  if (tags) {
    for (let i=0; i<tags.length; i++) {
      let tag = tags[i];
      dr_initIntegrationTag(0, tag);
    }
  }
}


function dr_getTagElementsWithId(id) {
  if (id) {
    let modId = id.trim();
    if (modId.length > 0) {
      if (modId.charAt(0) === '.') {
        return document.querySelectorAll(modId);
      } else {
        return document.querySelectorAll("#" + modId);
      }
    }
  }
  return undefined;
}

function dr_initIntegrationTag(iterationNr, tag) {
  if (iterationNr >= 4) {
    return;
  }

  if (tag) {
    if (tag.active !== true && tag.divId && tag.divId.length > 0) {
      let eList = dr_getTagElementsWithId(tag.divId);
      if (eList && eList.length > 0) {
        for (let i=0; i<eList.length; i++) {
          dr_replaceTagElementWithPlaceholder(eList[i], tag);
        }
      } else {
        setTimeout(function () {
          dr_initIntegrationTag(iterationNr + 1, tag);
        }, 100 + (iterationNr * 600));
      }

    }
  }
}

function dr_replaceTagElementWithPlaceholder(e, tag) {
  if (e && tag) {

    if (tag.placeholderDesign === "user") {

      // just link button
      let selector = tag.divId + " .cc-tag-activate-btn";
      if (tag.divId && tag.divId.length > 0) {
        if (tag.divId.charAt(0) === '.' || tag.divId.charAt(0) === '#') {
          // seems selector is ok
        } else {
          selector ="#" + selector;
        }
      }

      let bList = document.querySelectorAll(selector);
      if (bList && bList.length > 0) {
        for (let i=0; i<bList.length; i++) {
          let btn = bList[i];
          if (btn) {
            btn.setAttribute("dr_tagname", tag.divId);
            btn.addEventListener("click", dr_activateTagWithClick, true);
          }
        }
      }

    } else {

      if (tag.placeholderDesign === "map") {
        e.classList.add("cc-tag-placeholder-maps");
      } else if (tag.placeholderDesign === "video") {
        e.classList.add("cc-tag-placeholder-video");
      } else if (tag.placeholderDesign === "calendar") {
        e.classList.add("cc-tag-placeholder-calendar");
      }

      e.classList.add("cc-tag-placeholder");
      let privacyText = null;
      let buttonText = null;
      if ("de" === dr_getBannerLanguage()) {
        if (tag.privacyTextDe && tag.privacyTextDe.length > 0) {
          placeholderText = tag.privacyTextDe;
        }
        buttonText = tag.buttonTextDe;
      } else {
        if (tag.privacyTextEn && tag.privacyTextEn.length > 0) {
          placeholderText = tag.privacyTextEn;
        }
        buttonText = tag.buttonTextEn;
      }

      e.innerHTML = "";
      let btn = document.createElement('div');
      btn.className = "cc-tag-activate-btn";
      btn.setAttribute("dr_tagname", tag.divId);
      btn.innerHTML = buttonText;

      btn.addEventListener("click", dr_activateTagWithClick, true);

      let description = document.createElement("div");
      description.className = "cc-tag-info";
      description.innerHTML = placeholderText;

      e.appendChild(btn);
      e.appendChild(description);
    }
  }
}

function dr_activateTagWithClick(e) {
  let divId = e.target.getAttribute("dr_tagname");
  if (dr_generated_tags) {
    for (let i = 0; i < dr_generated_tags.length; i++) {
      let tag = dr_generated_tags[i];
      if (tag && tag.active !== true && tag.divId === divId) {

        tag.active = true;
        let eList = dr_getTagElementsWithId(tag.divId);
        //var e = document.getElementById(tag.divId);
        if (eList && eList.length > 0) {
          for (let j=0; j<eList.length; j++) {
            let el = eList[j];
            if (el) {
              dr_cleanElementFromPlaceholder(el);

              let code = dr_codeTemplateEngine(el, tag.code);

              if (tag.mode === "insert") {
                dr_cookiebanner_options.logJson("insert tag code", tag);
                el.innerHTML = code;
                //dr_insertTag(0, tag.divId, code);
              } else {
                dr_cookiebanner_options.logJson("dr_activateTag()", tag);
                dr_activateTag(code);
              }
            }
          }
        }

      }
    }
  }
}

function dr_codeTemplateEngine(e, originalCode) {
  if (e && originalCode) {
    let code = originalCode.replace(new RegExp("&lt;", 'g'), "<");
    for (let j = 0; j < e.attributes.length; j++) {
      // Store reference to current attr
      let attr = e.attributes[j];
      // If attribute nodeName starts with 'data-'
      if (/^data-/.test(attr.nodeName)) {
        let key = "{" + attr.nodeName.replace(/^data-/, '') + "}";
        let val = attr.nodeValue;
        code = code.split("$" + key).join(val);
      }
    }
    return code;
  }
}


function dr_cleanElementFromPlaceholder(e) {
  if (e) {
    e.classList.remove("cc-tag-placeholder");
    e.classList.remove("cc-tag-placeholder-maps");
    e.classList.remove("cc-tag-placeholder-video");
    e.classList.remove("cc-tag-placeholder-calendar");
    e.innerHTML = "";
    e.removeEventListener("click", dr_activateTagWithClick);
  }
}

function dr_insertTagOnStartup(iterationNr, divId, htmlCode) {

  let elList = dr_getTagElementsWithId(divId);
  if (elList && elList.length > 0) {
    for (let i=0; i<elList.length; i++) {
      if (elList[i]) {
        dr_cleanElementFromPlaceholder(elList[i]);
        elList[i].innerHTML = dr_codeTemplateEngine(elList[i], htmlCode);
      }
    }
  } else {
    setTimeout(function () {
      dr_insertTagOnStartup(iterationNr + 1, divId, htmlCode);
    }, 100 + (iterationNr * 600));
  }
}

function dr_activateInsertionTagOnStartup(iterationNr, divId, htmlCode) {
  let elList = dr_getTagElementsWithId(divId);
  if (elList && elList.length > 0) {
    for (let i=0; i<elList.length; i++) {
      if (elList[i]) {
        dr_cleanElementFromPlaceholder(elList[i]);
        dr_activateTag(dr_codeTemplateEngine(elList[i], htmlCode));
      }
    }
  } else {
    setTimeout(function () {
      dr_activateInsertionTagOnStartup(iterationNr + 1, divId, htmlCode);
    }, 100 + (iterationNr * 600));
  }
}


function dr_activateTag(htmlCode, removeAfterExecution) {

  let domelement = document.createElement('span');
  domelement.innerHTML = htmlCode;
  let exelist = [];

  let children = domelement.childNodes;

  for (const node of children) {
    if (node) {
      let added=false;
      if (dr_nodeName(node, "script")) {
        if (node.src) {
          if (node.src.length > 0) {

            const attrib = {};
            if (node.id) {
              attrib.id = node.id;
            }
            if (node.getAttribute("async") || node.getAttribute("async") === "") {
              attrib.async = true;
            }
            if (node.getAttribute("defer") || node.getAttribute("defer") === "") {
              attrib.defer = true;
            }

            if (node.dataset) {
              const dataset = {};
              let hasProperties = false;
              for (const key in node.dataset) {
                if (node.dataset.hasOwnProperty(key)) {
                  dataset[key] = node.dataset[key];
                  hasProperties = true;
                }
              }
              if (hasProperties) {
                attrib.dataset = dataset;
              }
            }

            exelist.push({
              type: "script_load",
              url: node.src,
              async: attrib.async || attrib.defer,
              done: false,
              removeAfterExe: false,
              attributes: attrib
            });
            added = true;
          }
        }
        if (!added) {
          exelist.push({type: "exe", script: node, done: false, removeAfterExe: removeAfterExecution});
          added = true;
        }
      } else if (dr_nodeName(node, "link")) {
        if (node.href) {
          if (node.href.length > 0) {
            exelist.push({type: "css_load", url: node.href, async: false, done: false, removeAfterExe: false});
            added=true;
          }
        }
      }

      if (!added) {
        exelist.push({type: "append", node:node, async: false, done: false, removeAfterExe: false});
        added=true;
      }
    }
  }


  // now execute scripts
  dr_executeScripts(exelist);
}

function dr_nodeName( elem, name ) {
  return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
}

function dr_executeScripts(exelist) {
  if (exelist) {
    for (let i=0; i<exelist.length; i++) {
      let exe = exelist[i];

      if (!exe.done) {

        exe.done = true;

        if (exe.type === "script_load") {
          if (exe.async) {
            dr_loadJs(exe.url, null, exe.attributes);
          } else {
            dr_loadJs(exe.url, exelist, exe.attributes);
            return;
          }
        } else if (exe.type === "css_load") {
          dr_loadCss(exe.url, exelist);
        } else if(exe.type === "append") {
          if (exe.node) {
            document.body.appendChild(exe.node);
          }
        } else {
          dr_evalScript(exe, exe.removeAfterExe);
        }

      }

    }
  }
}

function dr_loadResourceReady(exelist) {
  // continue executing
  dr_executeScripts(exelist);
}

function dr_evalScript( scriptElem, removeAfterExe ) {

  let elem = scriptElem.script;
  let data = ( elem.text || elem.textContent || elem.innerHTML || "" );

  let head = document.getElementsByTagName("head")[0] || document.documentElement,
  script = document.createElement("script");
  script.type = "text/javascript";
  if (window._drCspNonce) {
    script.nonce = window._drCspNonce;
  }

  script.appendChild( document.createTextNode( data ) );
  head.insertBefore( script, head.firstChild );

  if (removeAfterExe === true) {
    head.removeChild(script);
  }

  if ( elem.parentNode ) {
    elem.parentNode.removeChild( elem );
  }
}


const dr_loadJs = function(url, exelist, attributes){
  //url is URL of external file, implementationCode is the code
  //to be called from the file, location is the location to
  //insert the <script> element

  let scriptTag = document.createElement('script');
  scriptTag.src = url;

  if (attributes) {
    if (attributes.id) {
      scriptTag.id = attributes.id;
    }
    if (attributes.dataset) {
      for (const key in attributes.dataset) {
        scriptTag.dataset[key] = attributes.dataset[key];
      }
    }
    if (attributes.async) {
      scriptTag.setAttribute("async", true);
    }
    if (attributes.defer) {
      scriptTag.setAttribute("defer", true);
    }
  }


  if (exelist) {
    scriptTag.onload = function() {
      dr_loadResourceReady(exelist);
    };
    scriptTag.onreadystatechange = function() {
      dr_loadResourceReady(exelist);
    };
  }

  document.head.appendChild(scriptTag);
};

const dr_loadCss = function(url, exelist){
  //url is URL of external file, implementationCode is the code
  //to be called from the file, location is the location to
  //insert the <script> element

  let cssTag = document.createElement('link');
  cssTag.href = url;
  cssTag.rel = "stylesheet";
  cssTag.type="text/css";
  cssTag.media="all";

  cssTag.onload = function() {
    dr_loadResourceReady(exelist);
  };
  cssTag.onreadystatechange = function() {
    dr_loadResourceReady(exelist);
  };

  document.head.appendChild(cssTag);
};


const dr_directTagActivation = function(statistics, marketing, closePopup) {
  try {

    if (document.readyState === "loading") {

      let s = statistics;
      let m = marketing;
      let c = closePopup;

      document.addEventListener('readystatechange', function () {
        dr_directTagActivation(s,m,c);
      });

    } else {
      if (statistics || marketing || closePopup) {
        const scriptTags = document.querySelectorAll('script[type="text/plain"]');

        if (scriptTags) {
          for (let i = 0; i < scriptTags.length; i++) {
            const st = scriptTags[i];
            let exe = false;
            if (st && st.dataset && st.dataset.webcare) {
              if (st.dataset.webcare === "statistic") {
                if (statistics) {
                  exe = true;
                }
              } else if (st.dataset.webcare === "marketing") {
                if (marketing) {
                  exe = true;
                }
              } else if (st.dataset.webcare === "any") {
                if (statistics || marketing) {
                  exe = true;
                }
              } else if (st.dataset.webcare === "close") {
                if (closePopup) {
                  exe = true;
                }
              }

              if (exe) {
                dr_directTagExecute(st);
              }
            }
          }
        }
      }
    }

  } catch(err) {
    console.error(err);
  }
}

const dr_directTagExecute = function(element) {
  if (element) {
    const parent = element.parentNode;
    element.remove();
    element.type="text/javascript";
    element.dataset.webcare = "executed";
    parent.appendChild(element);
  }
}


var webcareCmp = {

  webcareConsentServer : "https://c.datareporter.eu",
  webcareConsentMandant : "9cfd8b26-b2ed-4ab0-b8b2-08966814492a",
  webcareConsentOrg : "9r5F33eV9jnY",
  webcareConsentVersion : "01",
  webcareConsentMode : "", // consent, stat, null

  _apiKey: "1g6rt_4c4b-93z",
  _event: null,

  _init: false,
  consentId: null,

  _consentKey: "_webcare_consentid",


  registerEvent: function(handler) {
    this._event = handler;

    // have to inform handlers when they register after consent id was changed
    if (handler && this.consentId) {
      handler({
        event: "cid-change",
        cid: this.consentId
      });
    }

  },

  unregisterEvent: function() {
    this._event = null;
  },

  initConsent : function() {
    if (this._init === false) {

      if (this.webcareConsentMode === "consent") {
        this.consentId = this._getSavedConsentId();
        if (this._isValidConsentId(this.consentId)) {
          this._sendEvent({
            event: "cid-change",
            cid: this.consentId
          });
        }
      } else if (this.webcareConsentMode === "stat") {
        this.consentId = "--";
        this._sendEvent({
          event: "cid-change",
          cid: this.consentId
        });
      } else {
        this.consentId = null;
        this._sendEvent({
          event: "cid-change",
          cid: this.consentId
        });
      }

      this._init = true;
    }
  },

  _sendEvent: function(e) {
    if (this._event) {
      this._event(e);
    }

  },

  _getConsentUrl : function(consent) {
    this.initConsent();

    var cid = this.consentId;
    if (cid === undefined || cid === null || cid.length <= 10 ) {
      cid = "-";
    }
    if (this.webcareConsentMode === "stat") {
      cid = "--";
    }

    return this.webcareConsentServer + "/e/1/" + this.webcareConsentMandant + "/" +
      this.webcareConsentOrg + "/" + this.webcareConsentVersion + "/" +
      this._chks(this.webcareConsentMandant, this.webcareConsentOrg, this.webcareConsentVersion, consent, cid) +
      "/" + consent + "/" + cid;
  },

  _performConsentRequest : function(consent) {
    if (this.webcareConsentMode === "stat" || this.webcareConsentMode === "consent") {
      var oReq = new XMLHttpRequest();
      var self = this;
      oReq.addEventListener("load", function () {
        if (self._isValidConsentId(this.responseText)) {
          if (this.responseText !== self.consentId) {
            self.consentId = this.responseText.trim().toLowerCase();

            self._saveConsentId();

            self._sendEvent({
              event: "cid-change",
              cid: self.consentId
            });

          }

          self._sendEvent({
            event: "consent-ok",
            operation: consent,
            cid: self.consentId
          });
        }
      });

      oReq.open("GET", this._getConsentUrl(consent));
      oReq.setRequestHeader("authentication", this._apiKey);
      oReq.setRequestHeader("hostname", location.hostname);
      oReq.send();

    }
  },

  /**
   * Clears all Consent IDs
   */
  clear : function() {
    var sendEvent = false;
    if (this.consentId != null) {
      sendEvent = true;
    }
    this.consentId = null;
    this._saveConsentId();

    if (sendEvent) {
      this._sendEvent({
        event: "cid-change",
        cid: this.consentId
      });
    }

  },

  /**
   * Register operation "Open GUI"
   * Called when the CMP GUI is shown
   */
  opengui : function() {
    this.initConsent();
    this._performConsentRequest("o");
  },

  /**
   * Register operation "Allow"
   * Called when the User selects "Allow all cookies"
   */
  allow : function() {
    this.initConsent();
    this._performConsentRequest("allow");
  },

  /**
   * Register operation "Apply"
   * Called when the User selects some classes and chooses "Apply"
   * consent string can be allow, tpsmu, deny
   */
  apply : function(consent) {
    this.initConsent();
    this._performConsentRequest(consent);
  },

  /**
   * Called when user chooses Deny
   * Only necessary cookies are allowed (same as tp)
   * @param consent
   */
  deny : function() {
    this.initConsent();
    this._performConsentRequest("deny");
  },

  /**
   * Called when the user revokes his choice and the GUI is shown again
   */
  revoke : function() {
    this.initConsent();
    this._performConsentRequest("revoke");
  },

  getConsentDetailLink : function() {
    if (this._isValidConsentId(this.consentId)) {
      return "https://conserve.datareporter.eu/consent-history/" + this.consentId;
    } else {
      return null;
    }
  },

  getConsentId : function() {
    if (this._isValidConsentId(this.consentId)) {
      return this.consentId;
    } else {
      return null;
    }
  },

  _chks : function(mandant, org, version, consent, consentId) {
    if (mandant && org && version && consent) {
      let s = "wcc:" + mandant + "_" + org + "_" + version + "_" + consent + "_" + consentId;
      var chk = 0xD0000000;
      var len = s.length;
      chk += 0x71210;
      for (var i = 0; i < len; i++) {
        chk += (s.charCodeAt(i) * (i + 1));
      }
      return (chk & 0xff).toString(26);
    } else {
      return null;
    }
  },

  _getSavedConsentId : function() {
    let cookieId = this._getCookie(this._consentKey);
    let localStorageId = localStorage.getItem(this._consentKey);

    if (this._isValidConsentId(cookieId)) {
      if (this._isValidConsentId(localStorageId)) {
        if (cookieId === localStorageId) {
          // do nothing, return one of the equals
          return localStorageId;
        } else {
          // not equal, take local storage and set cookie
          this._setCookie(this._consentKey, localStorageId);
          return localStorageId;
        }
      } else {
        // cookie must be it
        localStorage.setItem(this._consentKey, cookieId);
        return cookieId;
      }
    } else {
      if (this._isValidConsentId(localStorageId)) {
        // take local storage and set cookie
        this._setCookie(this._consentKey, localStorageId);
        return localStorageId;
      } else {
        // no valid id in here
        return null;
      }
    }

  },

  _isValidConsentId : function(c_id) {
    if (c_id && c_id.trim().length === 36) {
      return true;
    } else {
      return false;
    }
  },

  _saveConsentId : function() {
    // set cookie and local storage
    localStorage.setItem(this._consentKey, this.consentId);
    this._setCookie(this._consentKey, this.consentId);
  },

  _getCookie: function(name) {

    var value = '; ' + document.cookie;
    var parts = value.split('; ' + name + '=');
    var result = parts.length < 2
      ? undefined
      : parts
        .pop()
        .split(';')
        .shift();

    return result;
  },

  _setCookie: function(name, value) {
    var exdate = new Date();
    exdate.setDate(exdate.getDate() + 365);

    var cookie = [
      name + '=' + value,
      'expires=' + exdate.toUTCString(),
      'path=' + '/'
    ];

    if (location.protocol === 'https:') {
      cookie.push('secure');
      cookie.push('SameSite=none');
    }

    document.cookie = cookie.join(';');

  },

};




window.drExternalCmp = {

  _lastConsentStatus: null,
  _externalCmp: [],

  registerCmp : function(cmp) {
    if (cmp && typeof(cmp.onCmpRegister) === "function" && !this._externalCmp.includes(cmp)) {
      cmp.onCmpRegister();
      this._externalCmp.push(cmp);
    }
  },

  init: function() {
    this._updateConsentStatus("init");
  },

  opengui : function() {
    this._updateConsentStatus("opengui");
  },
  closegui : function(preTagActivation) {
    this._updateConsentStatus("closegui", preTagActivation);
  },
  consentChange : function(preTagActivation) {
    this._updateConsentStatus("change", preTagActivation);
  },

  revoke : function() {
    this._updateConsentStatus("revoke");
  },


  _updateConsentStatus : function(hint, preTagActivation) {
    if (hint) {
      let newConsentStatus = window.cookieconsent.currentConsentStatus();

      if (newConsentStatus && newConsentStatus.tech !== undefined) {
        let consentDidChange = false;
        if (this._lastConsentStatus == null) {
          this._lastConsentStatus = newConsentStatus;
          consentDidChange = true;
        } else {
          if (JSON.stringify(this._lastConsentStatus) !== JSON.stringify(newConsentStatus)) {
            this._lastConsentStatus = newConsentStatus;
            consentDidChange = true;
          }
        }

        this._notifyAll(hint, newConsentStatus, preTagActivation, consentDidChange);
      }
    }

  },

  _notifyAll : function(hint, currentConsentStatus, preTagActivation, consentDidChange) {
    if (this._externalCmp && this._externalCmp.length > 0) {
      for (let cmp of this._externalCmp) {
        try {
          if (consentDidChange) {
            if (cmp && typeof (cmp.onConsentChange) === "function") {
              cmp.onConsentChange(hint, currentConsentStatus);
            }
          }
        } catch (exc) {
          console.error(exc);
        }

        try {
          if (preTagActivation === true) {
            if (cmp && typeof (cmp.onBeforeTagActivation) === "function") {
              cmp.onBeforeTagActivation(hint, currentConsentStatus);
            }
          } else if (preTagActivation === false) {
            if (cmp && typeof (cmp.onAfterTagActivation) === "function") {
              cmp.onAfterTagActivation(hint, currentConsentStatus);
            }
          } else {
            if (cmp && typeof (cmp.onEvent) === "function") {
              cmp.onEvent(hint, currentConsentStatus);
            }
          }
        } catch (exc) {
          console.error(exc);
        }
      }
    }
  }

};
window.dataLayer = window.dataLayer || [];

if (window.drExternalCmp) {
  window.drExternalCmp.registerCmp({

    _consentUpdate: true,
    _consentModeActive: true,

    onCmpRegister : function() {

      if (window.disableGc2 === true) {
        this._consentModeActive = false;
      }

      if (this._consentModeActive === true) {
        this._gtag('consent', 'default', {
          'ad_storage': 'denied',
          'ad_user_data': 'denied',
          'ad_personalization': 'denied',
          'analytics_storage': 'denied'
        });
      }

      return "Google Consent Mode v2";

    },

    onBeforeTagActivation: function(hint, consent) {
      //console.log("GCM2(PRE TAG): " + hint + " " + JSON.stringify(consent));

      this._updateConsentToGtag(consent);
    },

    onAfterTagActivation: function(hint, consent) {
      //console.log("GCM2(POST TAG): " + hint + " " + JSON.stringify(consent));
    },

    onEvent: function(hint, consent) {
      //console.log("GCM2(EVENT): " + hint + " " + JSON.stringify(consent));
    },

    onConsentChange : function(hint, consent) {
      //console.log("GCM2(CHANGE): " + hint + " " + JSON.stringify(consent));
      this._consentUpdate = true;
    },

    _updateConsentToGtag: function(consent) {
      if (this._consentModeActive === true) {
        if (this._consentUpdate) {
          if (consent) {
            this._gtag('consent', 'update', {
              'ad_storage': consent.marketing ? 'granted' : 'denied',
              'ad_user_data': consent.marketing ? 'granted' : 'denied',
              'ad_personalization': consent.marketing ? 'granted' : 'denied',
              'analytics_storage': consent.statistic ? 'granted' : 'denied'
            });
          }
          this._consentUpdate = false;
        }
      }
    },

    _gtag : function() {
      //console.debug("GC2 Push: " + JSON.stringify(arguments));
      if (window.dataLayer) {
        window.dataLayer.push(arguments);
      }
    }

  });
}
window.uetq = window.uetq || [];

if (window.drExternalCmp) {
  window.drExternalCmp.registerCmp({

    _consentUpdate: true,
    _consentModeActive: true,

    onCmpRegister : function() {

      if (window.disableGc2 === true) {
        this._consentModeActive = false;
      }

      if (this._consentModeActive === true) {
        this._mtag('consent', 'default', {
          'ad_storage': 'denied'
        });
      }

      return "Microsoft Consent Mode";

    },

    onBeforeTagActivation: function(hint, consent) {
      //console.log("MSCMP(PRE TAG): " + hint + " " + JSON.stringify(consent));

      this._updateConsentToMtag(consent);
    },

    onAfterTagActivation: function(hint, consent) {
      //console.log("MSCMP(POST TAG): " + hint + " " + JSON.stringify(consent));
    },

    onEvent: function(hint, consent) {
      //console.log("MSCMP(EVENT): " + hint + " " + JSON.stringify(consent));
    },

    onConsentChange : function(hint, consent) {
      //console.log("MSCMP(CHANGE): " + hint + " " + JSON.stringify(consent));
      this._consentUpdate = true;
    },

    _updateConsentToMtag: function(consent) {
      if (this._consentModeActive === true) {
        if (this._consentUpdate) {
          if (consent) {
            this._mtag('consent', 'update', {
              'ad_storage': consent.marketing ? 'granted' : 'denied'
            });
          }
          this._consentUpdate = false;
        }
      }
    },

    _mtag : function() {
      //console.debug("GC2 Push: " + JSON.stringify(arguments));
      if (window.uetq) {
        window.uetq.push(arguments);
      }
    }

  });
}

if (window.drExternalCmp) {
  window.drExternalCmp.registerCmp({

    onCmpRegister : function() {
      return "miniTCF";
    },

    onBeforeTagActivation: function(hint, consent) {
      if (typeof(window.miniTcfConsent) === "function" && typeof window.__tcfapi !== "undefined") {
        window.miniTcfConsent(consent.statistic, consent.marketing);
      }
    },

    onAfterTagActivation: function(hint, consent) {
    },

    onEvent: function(hint, consent) {
      if (hint === "opengui") {
        if (typeof(window.miniTcfShowGui) === "function" && typeof window.__tcfapi !== "undefined") {
          window.miniTcfShowGui();
        }
      }
    },

    onConsentChange : function(hint, consent) {
      this._consentUpdate = true;
    },



  });
}
/*

 */

window.dr_keyNav = {

  _focusMode: false,
  _focusedElement: null,

  _focuslist: null,

  activateNav: function() {
    if (this._focuslist === null) {
      this._gatherFocusList();
    }
    document.addEventListener("keyup", this._keyListener);
  },

  deactivateNav: function() {
    document.removeEventListener("keyup", this._keyListener);
    this._focus(null);
  },

  _gatherFocusList: function() {
    this._focuslist = [];
    var elements = document.querySelectorAll(".dr-key-tabable");
    if (elements && elements.length > 0) {
      for (var i=0; i < elements.length; i++ ) {
        var elm = elements[i];
        if (elm && elm.tabIndex > 0) {
          this._focuslist.push(elm);
        }
      }
    }

    this._focuslist.sort(function(a, b) {
      var idxA = 0;
      var idxB = 0;
      if (a) {
        idxA = a.tabIndex;
      }
      if (b) {
        idxB = b.tabIndex;
      }
      return idxA - idxB;
    });

  },

  _firstFocus : function() {
    var that = window.dr_keyNav;
    if (that._focuslist != null && that._focuslist.length > 0) {
      that._nextFocus(true);
    }
  },

  _nextFocus : function(initial) {
    var that = window.dr_keyNav;
    var idx = -1;
    if (initial !== true) {
      idx = that._currentFocusIndex();
    }
    if (idx !== null) {
      var overflowcount = 0;
      do {
        idx++;
        if (idx >= that._focuslist.length) {
          idx = 0;
          overflowcount++;
          if (overflowcount === 2) {
            return; // cannot focus
          }
        }
      } while (!that._canFocus(that._focuslist[idx]));
      that._focus(that._focuslist[idx]);
    }
  },

  _previousFocus : function() {
    var that = window.dr_keyNav;
    var idx = that._currentFocusIndex();
    if (idx !== null) {
      var overflowcount = 0;
      do {
        idx--;
        if (idx < 0) {
          idx = that._focuslist.length - 1;
          overflowcount++;
          if (overflowcount === 2) {
            return; // cannot focus
          }
        }
      } while (!that._canFocus(that._focuslist[idx]));
      that._focus(that._focuslist[idx]);
    }
  },

  _currentFocusIndex : function() {
    var that = window.dr_keyNav;
    var result = 0;
    if (that._focuslist && that._focuslist.length > 0) {
      if (that._focusedElement) {
        for (var i = 0; i < that._focuslist.length; i++) {
          if (that._focuslist[i] === that._focusedElement) {
            result = i;
            break;
          }
        }
      }
    } else {
      result = null;
    }
    return result;
  },

  _canFocus : function(el) {
    if (el) {
       if (el.offsetWidth > 0 && el.offsetHeight > 0) {
         return true;
       }
    }
    return false;
  },

  _keyListener : function(event) {
    var that = window.dr_keyNav;
    var key = event.code;

    if (that._focusMode === true) {
      event.stopPropagation();

      if (key === "ArrowUp"  || key === "ArrowLeft" || (key === "Tab" && event.shiftKey === true)) {
        that._previousFocus();
      }

      if (key === "ArrowDown" || key === "ArrowRight" || (key === "Tab" && event.shiftKey !== true)) {
        that._nextFocus();
      }

      if (key === "Escape") {
        that._focus(null);
      }

      if (key === "Space" || key === "Enter") {
        that._activateCurrentFocus(key);
      }
    } else {
      if (key === "Tab" || key === "Space" || key === "ArrowRight" || key === "ArrowLeft" ) {
        event.stopPropagation();
        that._firstFocus();
      } else if (key === "Escape") {
        var elementDeny = document.querySelector(".cc-window .cc-deny");
        if (elementDeny) {
          elementDeny.click();
        }
      } else if (key === "Enter") {
        var elementAllow = document.querySelector(".cc-window .cc-allow");
        if (elementAllow) {
          elementAllow.click();
        }
      }
    }
  },

  _focus : function(selector) {
    var that = window.dr_keyNav;

    dr_removeCssClass(".cc-window .dr-keyfocus", "dr-keyfocus");

    that._focusedElement = null;


    if (selector) {
      that._focusMode = true;
      var element = null;
      if (typeof selector === "string") {
        element = document.querySelector(".cc-window " + selector);
      } else {
        element = selector;
      }

      if (element && element.classList) {
        element.classList.add("dr-keyfocus");
        element.focus();
        that._focusedElement = element;
      } else {

      }
    } else {
      that._focusMode = false;
    }
  },

  _activateCurrentFocus : function(key) {
    var that = window.dr_keyNav;
    if (that._focusedElement) {
      var exe = "click";
      if (that._focusedElement.dataset && that._focusedElement.dataset["keytab"] === "noreturn" && key === "Enter") {
        exe = null;
      }
      if (that._focusedElement.dataset && that._focusedElement.dataset["keytab"] === "checkbox" && that._focusedElement.dataset["keytabid"]) {
        exe = null;
        var cb = document.getElementById(that._focusedElement.dataset["keytabid"]);
        if (cb) {
          cb.click();
        }
      }
      if (exe === "click") {
        that._focusedElement.click();
      }
    }
  }

}






var dr_generated_banner = {
  "de" : "<div role=\"dialog\" aria-modal=\"true\" aria-live=\"polite\" aria-label=\"cookie consent\" aria-describedby=\"cookieconsent:desc\" class=\"cc-window cc-banner cc-type-opt-out cc-theme-block cc-bottom cc-color-override-datareporter \" id=\"dr_cookie_banner_container\"> <style nonce=\"__csp:replace_nonce__\">" + 
 "  #dr_detailed-banner {" + 
 "    width:100%;margin:0;padding:0;border:0;;" + 
 "  }" + 
 "  #dr-category-table-tech, #dr-category-table-statistic, #dr-category-table-marketing, #dr-category-table-unclassified {" + 
 "    display:none;" + 
 "  }" + 
 "</style> <div id=\"dr_detailed-banner\"> <div id=\"cookieconsent:desc\" class=\"cc-message\"> <div role=\"presentation\" class=\"dr-insert-content dr-invisible-element dr-hide-on-detail\" id=\"dr-insert-content\"></div> <div class=\"dr-cookietext\"> <p role=\"heading\" aria-level=\"1\" class=\"dr-headline\">Unsere Webseite nutzt Cookies</p> <p role=\"main\" class=\"dr-descriptiontext dr-hide-on-detail\"><span>Weitere Informationen zu Cookies erhalten Sie in diesem Cookiebanner und in unserer Datenschutzerkl&auml;rung (siehe unten). Klicken Sie auf \"Alle Cookies erlauben\", um alle Arten von Cookies zu akzeptieren oder klicken Sie auf \"Nur erforderliche Cookies erlauben\" um nur jene Cookies zu zulassen, die f&uuml;r den Betrieb und Funktion der Webseite unbedingt erforderlich sind. </span> <a id=\"dr-privacylink-id\" data-url=\"https://www.mj-montage.ch/footer-meta/datenschutz.html\" class=\"dr-privacylink dr-key-tabable\" tabindex=\"98\" title=\"zur Datenschutzerkl&auml;rung...\" href=\"#\"> zur Datenschutzerkl&auml;rung...</a> <a id=\"dr-imprintlink-id\" data-url=\"https://www.mj-montage.ch/footer-meta/impressum.html\" class=\"dr-imprintlink dr-key-tabable\" tabindex=\"99\" title=\"Impressum\" href=\"#\"> Impressum</a> </p> <ul class=\"dr-overview-list\"> <li role=\"presentation\" class=\"dr-overview-category-item dr-hide-on-detail\"> <label class=\"dr-category-overview\"><span class=\"dr-category-overview-text\">Erforderlich</span> <span class=\"dr-checkmark dr-roundcorners dr-checkmark-active-readonly\"> <span></span> </span> </label> </li> <li class=\"dr-overview-category-item dr-show-mobile\"> <a role=\"button\" aria-labelledby=\"dr-categorybanner-btn-show-more-mobile\" id=\"dr-categorybanner-btn-show-more-mobile\" href=\"#\" class=\"dr-btn-show-more-mobile dr-key-tabable\" data-keytab=\"noreturn\" tabindex=\"10\"><span class=\"dr-open-arrow\"></span><span>Details anzeigen</span></a> </li> </ul> </div> </div> <div class=\"cc-compliance cc-highlight\"> <a role=\"button\" aria-labelledby=\"dr-categorybanner-btn-show-more-desktop\" id=\"dr-categorybanner-btn-show-more-desktop\" tabindex=\"11\" href=\"#\" class=\"cc-btn dr-btn-show-more dr-hide-on-mobile dr-key-tabable\" data-keytab=\"noreturn\"><span class=\"dr-open-arrow\"></span><span>Details anzeigen</span></a> <a role=\"button\" id=\"cc-deny-01\" aria-labelledby=\"cc-deny-01\" class=\"cc-btn cc-deny dr-roundcorners dr-noborder-deny dr-key-tabable\" tabindex=\"12\">Einstellungen &uuml;bernehmen</a> <a role=\"button\" id=\"cc-allow-01\" aria-labelledby=\"cc-allow-01\" class=\"cc-btn cc-allow dr-roundcorners dr-btn-shadow dr-noborder-allow dr-key-tabable\" tabindex=\"13\">Alle Cookies erlauben</a> </div> <div class=\"dr-tab-category-details dr-roundcorners dr-shadow \" id=\"dr-tab-category-details\"> <ul class=\"dr-tab-category-content\"> <li role=\"heading\" aria-level=\"2\" class=\"dr-category-headline\">Erforderlich (2)</li> <li class=\"dr-category-switch\"> &nbsp; </li> <li class=\"dr-tab-category-text\"> <span>Technisch notwendige Cookies dienen dazu, um den technischen Betrieb einer Webseite zu erm&ouml;glichen und diese f&uuml;r Sie funktional nutzbar zu machen. Die Nutzung erfolgt aufgrund unseres berechtigten Interesses eine technisch einwandfreie Webseite anzubieten. Sie k&ouml;nnen jedoch generell die Cookie Nutzung in Ihrem Browser deaktivieren.<br/></span> <a id=\"dr-categorybanner-show-tech-details-id\" data-category=\"tech\" class=\"dr-tab-category-morelink dr-key-tabable\" tabindex=\"20\" data-keytab=\"noreturn\" href=\"#\"><span class=\"dr-open-arrow-small\"></span><span>Details anzeigen</span></a> </li> <li class=\"dr-category-table\" id=\"dr-category-table-tech\"> <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\"> <thead> <tr class=\"dr-tableheader-row\"> <th class=\"dr-tableheader-cell dr-tableheader-name dr-roundcorners-left\">Name</th> <th class=\"dr-tableheader-cell dr-tableheader-provider\">Ersteller</th> <th class=\"dr-tableheader-cell dr-tableheader-valid\">Speicherdauer</th> <th class=\"dr-tableheader-cell dr-tableheader-domain dr-roundcorners-right\">Domain</th> </tr> </thead> <tbody> <tr class=\"dr-detail-tabledata\"> <td data-label=\"Name\" class=\"dr-cut-line dr-linebreak-anywhere\"><span class=\" dr-cookie-name\" title=\"cookieconsent_mode\">cookieconsent_mode</span></td> <td data-label=\"Ersteller\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"DataReporter GmbH\">DataReporter GmbH</span></td> <td data-label=\"Speicherdauer\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"12 Monate\">12 Monate</span></td> <td data-label=\"Domain\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"mj-montage.ch\">mj-montage.ch</span></td> </tr> <tr class=\"dr-detail-tabledata dr-detail-tabledata-addon\"> <td class=\"dr-hide-on-mobile\">&nbsp;</td> <td data-label=\"\" colspan=\"3\" class=\"dr-cookie-purpose\"><span>enth&auml;lt die Informationen, inwieweit der Nutzer die Verwendung von Cookies best&auml;tigt hat.</span></td> </tr> <tr class=\"dr-detail-tabledata\"> <td data-label=\"Name\" class=\"dr-cut-line dr-linebreak-anywhere\"><span class=\" dr-cookie-name\" title=\"cookieconsent_status\">cookieconsent_status</span></td> <td data-label=\"Ersteller\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"DataReporter GmbH\">DataReporter GmbH</span></td> <td data-label=\"Speicherdauer\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"12 Monate\">12 Monate</span></td> <td data-label=\"Domain\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"mj-montage.ch\">mj-montage.ch</span></td> </tr> <tr class=\"dr-detail-tabledata dr-detail-tabledata-addon\"> <td class=\"dr-hide-on-mobile\">&nbsp;</td> <td data-label=\"\" colspan=\"3\" class=\"dr-cookie-purpose\"><span>enth&auml;lt die Informationen, inwieweit der Nutzer die Verwendung von Cookies best&auml;tigt hat.</span></td> </tr> </tbody> </table> </li> <li class=\"dr-category-separator\"><hr/></li> <li role=\"heading\" aria-level=\"2\" class=\"dr-category-headline\">&Uuml;ber Cookies</li> <li class=\"dr-tab-category-text \"> <span>Cookies sind kleine Datenpakete, die zwischen Ihrem Browser und unserem Webserver ausgetauscht werden. Cookies k&ouml;nnen nur Informationen speichern, die von Ihrem Browser geliefert werden.<br/><br/>Je nach Verwendungszweck sind Cookies technisch erforderlich oder werden f&uuml;r Statistik- oder Marketingzwecke genutzt. Die Verwendung von technisch erforderlichen Cookies beruht auf unserem berechtigten Interesse am technisch einwandfreien Betrieb und an der reibungslosen Funktionalit&auml;t unserer Website. Die Verwendung von Statistik- und Marketing-Cookies ben&ouml;tigt eine Einwilligung. Diese ist freiwillig und kann jederzeit f&uuml;r die Zukunft durch den Aufruf der Cookie Einstellungen widerrufen werden.<br/><br/>Sie k&ouml;nnen Ihren Browser auch so einstellen, dass das Speichern von Cookies generell verhindert wird. Einmal gesetzte Cookies k&ouml;nnen Sie jederzeit wieder l&ouml;schen. Wie all dies im Einzelnen funktioniert, finden Sie in der Hilfe-Funktion Ihres Browsers. Bitte beachten Sie, dass eine generelle Deaktivierung von Cookies gegebenenfalls zu Funktionseinschr&auml;nkungen auf unserer Website f&uuml;hren kann.<br/><br/>N&auml;here Informationen, welche Daten in Cookies gespeichert, zu welchen Zwecken diese verwendet und f&uuml;r wie lange Daten gespeichert werden, erhalten Sie in unserer Datenschutzerkl&auml;rung und in unserem Cookie Banner.</span> <span id=\"dr_webcareCmpLink\"></span> </li> <li class=\"dr-category-separator\">&nbsp;</li> </ul> </div> </div> </div>",
"en" : "<div role=\"dialog\" aria-modal=\"true\" aria-live=\"polite\" aria-label=\"cookie consent\" aria-describedby=\"cookieconsent:desc\" class=\"cc-window cc-banner cc-type-opt-out cc-theme-block cc-bottom cc-color-override-datareporter \" id=\"dr_cookie_banner_container\"> <style nonce=\"__csp:replace_nonce__\">" + 
 "  #dr_detailed-banner {" + 
 "    width:100%;margin:0;padding:0;border:0;;" + 
 "  }" + 
 "  #dr-category-table-tech, #dr-category-table-statistic, #dr-category-table-marketing, #dr-category-table-unclassified {" + 
 "    display:none;" + 
 "  }" + 
 "</style> <div id=\"dr_detailed-banner\"> <div id=\"cookieconsent:desc\" class=\"cc-message\"> <div role=\"presentation\" class=\"dr-insert-content dr-invisible-element dr-hide-on-detail\" id=\"dr-insert-content\"></div> <div class=\"dr-cookietext\"> <p role=\"heading\" aria-level=\"1\" class=\"dr-headline\">Our website uses cookies</p> <p role=\"main\" class=\"dr-descriptiontext dr-hide-on-detail\"><span>You can find more information about cookies in this cookie banner and in our privacy policy (see below). Click on \"Allow all cookies\" to accept all types of cookies or click on \"Only allow required cookies\" to allow only those cookies that are absolutely necessary for the operation and function of the website.</span> <a id=\"dr-privacylink-id\" data-url=\"https://www.mj-montage.ch/footer-meta/datenschutz.html\" class=\"dr-privacylink dr-key-tabable\" tabindex=\"98\" title=\"Privacy statement...\" href=\"#\"> Privacy statement...</a> <a id=\"dr-imprintlink-id\" data-url=\"https://www.mj-montage.ch/footer-meta/impressum.html\" class=\"dr-imprintlink dr-key-tabable\" tabindex=\"99\" title=\"Imprint\" href=\"#\"> Imprint</a> </p> <ul class=\"dr-overview-list\"> <li role=\"presentation\" class=\"dr-overview-category-item dr-hide-on-detail\"> <label class=\"dr-category-overview\"><span class=\"dr-category-overview-text\">Required</span> <span class=\"dr-checkmark dr-roundcorners dr-checkmark-active-readonly\"> <span></span> </span> </label> </li> <li class=\"dr-overview-category-item dr-show-mobile\"> <a role=\"button\" aria-labelledby=\"dr-categorybanner-btn-show-more-mobile\" id=\"dr-categorybanner-btn-show-more-mobile\" href=\"#\" class=\"dr-btn-show-more-mobile dr-key-tabable\" data-keytab=\"noreturn\" tabindex=\"10\"><span class=\"dr-open-arrow\"></span><span>Show details</span></a> </li> </ul> </div> </div> <div class=\"cc-compliance cc-highlight\"> <a role=\"button\" aria-labelledby=\"dr-categorybanner-btn-show-more-desktop\" id=\"dr-categorybanner-btn-show-more-desktop\" tabindex=\"11\" href=\"#\" class=\"cc-btn dr-btn-show-more dr-hide-on-mobile dr-key-tabable\" data-keytab=\"noreturn\"><span class=\"dr-open-arrow\"></span><span>Show details</span></a> <a role=\"button\" id=\"cc-deny-01\" aria-labelledby=\"cc-deny-01\" class=\"cc-btn cc-deny dr-roundcorners dr-noborder-deny dr-key-tabable\" tabindex=\"12\">Apply settings</a> <a role=\"button\" id=\"cc-allow-01\" aria-labelledby=\"cc-allow-01\" class=\"cc-btn cc-allow dr-roundcorners dr-btn-shadow dr-noborder-allow dr-key-tabable\" tabindex=\"13\">Allow all cookies</a> </div> <div class=\"dr-tab-category-details dr-roundcorners dr-shadow \" id=\"dr-tab-category-details\"> <ul class=\"dr-tab-category-content\"> <li role=\"heading\" aria-level=\"2\" class=\"dr-category-headline\">Required (2)</li> <li class=\"dr-category-switch\"> &nbsp; </li> <li class=\"dr-tab-category-text\"> <span>Technically necessary cookies are used to enable the technical operation of a website and make it functional for you. The use is based on our legitimate interest to provide a technically flawless website. However, you can generally disable the use of cookies in your browser. <br/></span> <a id=\"dr-categorybanner-show-tech-details-id\" data-category=\"tech\" class=\"dr-tab-category-morelink dr-key-tabable\" tabindex=\"20\" data-keytab=\"noreturn\" href=\"#\"><span class=\"dr-open-arrow-small\"></span><span>Show details</span></a> </li> <li class=\"dr-category-table\" id=\"dr-category-table-tech\"> <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\"> <thead> <tr class=\"dr-tableheader-row\"> <th class=\"dr-tableheader-cell dr-tableheader-name dr-roundcorners-left\">Surname</th> <th class=\"dr-tableheader-cell dr-tableheader-provider\">Creator</th> <th class=\"dr-tableheader-cell dr-tableheader-valid\">Storage time</th> <th class=\"dr-tableheader-cell dr-tableheader-domain dr-roundcorners-right\">Domain</th> </tr> </thead> <tbody> <tr class=\"dr-detail-tabledata\"> <td data-label=\"Surname\" class=\"dr-cut-line dr-linebreak-anywhere\"><span class=\" dr-cookie-name\" title=\"cookieconsent_mode\">cookieconsent_mode</span></td> <td data-label=\"Creator\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"DataReporter GmbH\">DataReporter GmbH</span></td> <td data-label=\"Storage time\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"12 months\">12 months</span></td> <td data-label=\"Domain\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"mj-montage.ch\">mj-montage.ch</span></td> </tr> <tr class=\"dr-detail-tabledata dr-detail-tabledata-addon\"> <td class=\"dr-hide-on-mobile\">&nbsp;</td> <td data-label=\"\" colspan=\"3\" class=\"dr-cookie-purpose\"><span>contains the information to what extent the user has confirmed the use of cookies.</span></td> </tr> <tr class=\"dr-detail-tabledata\"> <td data-label=\"Surname\" class=\"dr-cut-line dr-linebreak-anywhere\"><span class=\" dr-cookie-name\" title=\"cookieconsent_status\">cookieconsent_status</span></td> <td data-label=\"Creator\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"DataReporter GmbH\">DataReporter GmbH</span></td> <td data-label=\"Storage time\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"12 months\">12 months</span></td> <td data-label=\"Domain\" class=\"dr-cut-line dr-linebreak-anywhere\"><span title=\"mj-montage.ch\">mj-montage.ch</span></td> </tr> <tr class=\"dr-detail-tabledata dr-detail-tabledata-addon\"> <td class=\"dr-hide-on-mobile\">&nbsp;</td> <td data-label=\"\" colspan=\"3\" class=\"dr-cookie-purpose\"><span>contains the information to what extent the user has confirmed the use of cookies.</span></td> </tr> </tbody> </table> </li> <li class=\"dr-category-separator\"><hr/></li> <li role=\"heading\" aria-level=\"2\" class=\"dr-category-headline\">About cookies</li> <li class=\"dr-tab-category-text \"> <span>Cookies are small data packages that are exchanged between your browser and our web server. Cookies can only store information provided by your browser.<br/><br/>Depending on the intended use, cookies are either technically necessary or are used for statistical or marketing purposes. The use of technically required cookies is based on our legitimate interest in the technically correct operation and smooth functionality of our website. The use of statistics and marketing cookies requires your consent. This is voluntary and can be revoked at any time for the future by calling up our cookie settings.<br/><br/>You can also set your browser to generally prevent the storage of cookies. Once cookies have been set, you can delete them at any time. How all this works in details can be found in the help function of your browser. Please note that a general deactivation of cookies may lead to functional restrictions on our website.<br/><br/>You can find more detailed information on what data is stored in cookies, for what purposes they are used and for how long data is stored in our data protection declaration and in our cookie banner.</span> <span id=\"dr_webcareCmpLink\"></span> </li> <li class=\"dr-category-separator\">&nbsp;</li> </ul> </div> </div> </div>",

};

var dr_generated_policies = {
  "de" : "Einstellungen zu Cookies...",
"en" : "Settings for cookies ...",

};

var dr_generated_tags = [ {
  "divId" : ".map",
  "mode" : "insert",
  "category" : "",
  "activationMode" : "",
  "active" : false,
  "code" : "&lt;iframe src=\"${src}\" width=\"900\" height=\"400\" frameborder=\"0\" style=\"border:0\" allowfullscreen>&lt;/iframe>\n",
  "buttonTextDe" : "Karte anzeigen",
  "buttonTextEn" : "Show map",
  "privacyTextDe" : "Zum Aktivieren von Google Map bitte auf den Button klicken.\n    Durch das Aktivieren von eingebetteten Karten werden Daten an Google Inc. übermittelt.\n Weitere Informationen können unserer <a href=\"https://www.mj-montage.ch/footer-meta/datenschutz.html\" target=\"_blank\">Datenschutzerklärung</a> entnommen werden.",
  "privacyTextEn" : "To activate Google Map please click on the button.\n By activating embedded maps, data is transmitted to Google Inc..\n Further information can be found in our <a href=\"https://www.mj-montage.ch/footer-meta/datenschutz.html\" target=\"_blank\">privacy policy</a>.",
  "placeholderDesign" : "map",
  "ignoreCookies" : [ ]
}, {
  "divId" : ".youtube",
  "mode" : "insert",
  "category" : "",
  "activationMode" : "",
  "active" : false,
  "code" : "&lt;iframe src=\"${src}\" frameborder=\"0\" allowfullscreen allow=\"autoplay\">&lt;/iframe>\n",
  "buttonTextDe" : "Video anzeigen",
  "buttonTextEn" : "Show video",
  "privacyTextDe" : "Zum Aktivieren von YouTube bitte auf den Button klicken.\n    Durch das Aktivieren von eingebetteten Videos werden Daten an Google Inc. übermittelt.\n Weitere Informationen können unserer <a href=\"https://www.mj-montage.ch/footer-meta/datenschutz.html\" target=\"_blank\">Datenschutzerklärung</a> entnommen werden.",
  "privacyTextEn" : "To activate YouTube please click on the button.\n By activating embedded videos, data is transmitted to Google Inc..\n Further information can be found in our <a href=\"https://www.mj-montage.ch/footer-meta/datenschutz.html\" target=\"_blank\">privacy policy</a>.",
  "placeholderDesign" : "video",
  "ignoreCookies" : [ ]
} ];

var dr_ignore_cookies = ['cookieconsent_status', 'cookieconsent_mode', '_webcare_consentid','cookieconsent_mode','cookieconsent_status'];
var dr_delete_cookies = [];
var dr_deleteCookieMode = "categories"; // all (all cookies except ignore), manual (none), auto (only marketing/statistic) or categories (manual category choose)

var dr_bannerLanguage = dr_getBannerLanguage();

var cookieMobileImage = "<style nonce='__csp:replace_nonce__'>#dr_mobilePreviewCookie {display:none;}</style><svg role='presentation' version='1.1' id='dr_mobilePreviewCookie' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px'  viewBox='0 0 50 50' xml:space='preserve'><g id='surface1' class='dr_mobilePreviewCookie_fill'><path d='M25,33.7c-0.5-0.2-2.1-1-4.1-3.2c-2.2-2.5-4.3-6.6-4.5-13c1.9-0.2,3.4-0.8,4.6-1.4c1.3-0.7,2.3-1.3,4-1.3V33.7z  M14.5,16.7 M15.5,15.8'/><path d='M25,8.2c-3.1,0-5.3,1.2-7.2,2.3s-3.6,1.9-6.8,1.9H9.6v1.4c0,10.8,3.6,17.8,7.3,22.1s7.5,5.8,7.5,5.8l0.5,0.2 l0.5-0.2c0,0,3.8-1.5,7.5-5.8s7.3-11.3,7.3-22.1v-1.4H39c-3.2,0-4.9-0.9-6.8-1.9C30.3,9.4,28.1,8.2,25,8.2z M25,11 c2.4,0,3.9,0.9,5.8,1.9c1.7,0.9,3.9,1.8,6.7,2.1c-0.3,9.5-3.4,15.5-6.6,19.1c-2.9,3.3-5.3,4.4-5.9,4.7c-0.7-0.3-3.1-1.4-5.9-4.7 c-3.2-3.6-6.3-9.6-6.6-19.1c2.8-0.3,5-1.2,6.7-2.1C21.1,11.8,22.6,11,25,11z'/></g></svg>";



var dr_cookiebanner_options = {
  version: "2024_02.b517",
  type: 'opt-out',
  position: 'bottom',
  policyPosition: "bottom",
  applicationPath : 'https://webcache-eu.datareporter.eu/c/9cfd8b26-b2ed-4ab0-b8b2-08966814492a/9r5F33eV9jnY/BR6/',
  companyPath : 'https://webcache-eu.datareporter.eu/c/9cfd8b26-b2ed-4ab0-b8b2-08966814492a/9r5F33eV9jnY/',
  imprintDivName : "dr-imprint-div",
  imprintScript: "imprint_gtm.js",
  privacyDivName : "dr-privacynotice-div",
  privacyScript : "privacynotice_gtm.js",
  privacyLinkUrl : null,
  openPrivacyLinkInDocViewer: false,
  openImprintLinkInDocViewer: false,
  debugLogActive: false,
  googleDataLayerName: "dataLayer",
  useRevokeCookieIcon: "true",
  dr_removeJsCookies : null,
  cookieDomain: "",
  cookieConsentModeName: "cookieconsent_mode",
  cookieConsentName: "cookieconsent_status",
  cookieLocalStorage: false,
  insertTopLogo: "",
  previewMode: false,
  overrideHTML: dr_generated_banner[dr_bannerLanguage],
  animateRevokable: true,
  animateBanner: true,
  preBannerOptions: null,
  revokeOnMobile: true,
  dr_purgeRunning :false, // is the cookie purge daemon running?
  dr_cookiesEnabled: false, // are cookies currently enabled?
  dr_button_policy_hide : 'false',  // hide the policy button if configured
  dr_autoAcceptCookies: '', // 'allow' to not show cookie banner and accept all cookies, 'deny' to not show and deny all cookies
  dr_acceptedCategories : [], // strings with accepted categories (statistic, marketing, unclassified)
  onRedirectAfterConsent : null, // eventhandler - called when a redirect from countryselect banner occures instead of redirecting
  swarmCrawlerVersion: 2,
  content: {
    policy: dr_generated_policies[dr_bannerLanguage],
    mobilePolicy: cookieMobileImage,
  },
  cookieBlockTiming : {
    delay: 200,
    incrementDelay: 200,
    incrementFactor: 2.0,
    maxDelay: 15000,
  },
  swarmCrawlerTiming: {
    min: 1000,
    rnd: 10000,
  },
  gtmInitTiming: {
    delay: 1000,
    maxRetry: 10,
  },
  log: function(msg) {
    if (dr_cookiebanner_options.debugLogActive) {
      console.debug(new Date().toLocaleTimeString() + " " + msg);
    }
  },
  logJson: function(msg, jsonObject) {
    if (dr_cookiebanner_options.debugLogActive) {
      console.debug(new Date().toLocaleTimeString() + " " + msg + " -------- Start --------");
      console.debug(jsonObject);
      console.debug(new Date().toLocaleTimeString() + " " + msg + " -------- End --------");
    }
  },
  configureDebugLogOutput: function() {
    var debugParam = dr_getParameterByName("_webcare_debug")
    if (debugParam === "true") {
      dr_cookiebanner_options.debugLogActive = true;
    }
  },
  gtmInit : function() {
    dr_cookiebanner_options.log("gtmInit()");

    var foundInsertion = false;
    var o = dr_cookiebanner_options;
    var elem = document.getElementById(o.imprintDivName);
    if (elem) {
      o.loadJsModule(o.companyPath + o.imprintScript, o.activateImprint, document.body);
      foundInsertion = true;
    }
    var elem = document.getElementById(o.privacyDivName);
    if (elem) {
      o.loadJsModule(o.companyPath + o.privacyScript, o.activatePrivacy, document.body);
      foundInsertion = true;
    }

    if (!foundInsertion) {
      // retry the insertion up to 15 seconds
      o.gtmInitTiming.maxRetry -= 1;
      if (o.gtmInitTiming.maxRetry >= 0) {
        setTimeout(o.gtmInit, o.gtmInitTiming.delay);
      }
    }

  },
  activateImprint : function() {
    dr_cookiebanner_options.log("activateImprint()");
    if (dr_webcare_imprint) {
      dr_webcare_imprint.integrateWithElementId(dr_cookiebanner_options.imprintDivName);
    }
  },
  activatePrivacy : function() {
    dr_cookiebanner_options.log("activatePrivacy()");
    if (dr_webcare_privacynotice) {
      dr_webcare_privacynotice.integrateWithElementId(dr_cookiebanner_options.privacyDivName);
    }
  },
  loadJsModule : function(url, implementationCode, location){
    dr_cookiebanner_options.log("loadJsModule()");
    var scriptTag = document.createElement('script');
    scriptTag.src = url;

    scriptTag.onload = implementationCode;
    scriptTag.onreadystatechange = implementationCode;

    location.appendChild(scriptTag);
  },
  onPopupOpen : function() {
    dr_cookiebanner_options.log("onPopupOpen()");
    dr_cookiebanner_options.log("Cookie Block Mode:", dr_deleteCookieMode);
    dr_cookiebanner_options.logJson("Ignore Cookies:", dr_ignore_cookies);
    dr_cookiebanner_options.logJson("Delete Cookies:", dr_delete_cookies);

    if (webcareCmp) {
      webcareCmp.opengui();
    }
    if (window.drExternalCmp) {
      window.drExternalCmp.opengui();
    }

    if (dr_cookiebanner_options.dr_preSelectCategoriesOnPopupOpen && dr_cookiebanner_options.dr_preSelectCategoriesOnPopupOpen.length > 0) {

      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-headline-statistic", dr_cookiebanner_options.dr_hasPreSelectedConsent("statistic"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-details-statistic", dr_cookiebanner_options.dr_hasPreSelectedConsent("statistic"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-headline-marketing", dr_cookiebanner_options.dr_hasPreSelectedConsent("marketing"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-details-marketing", dr_cookiebanner_options.dr_hasPreSelectedConsent("marketing"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-headline-unclassified", dr_cookiebanner_options.dr_hasPreSelectedConsent("unclassified"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-details-unclassified", dr_cookiebanner_options.dr_hasPreSelectedConsent("unclassified"));

      dr_cookiebanner_options.dr_preSelectCategoriesOnPopupOpen = null;
    } else {
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-headline-statistic", dr_cookiebanner_options.dr_hasConsent("statistic"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-details-statistic", dr_cookiebanner_options.dr_hasConsent("statistic"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-headline-marketing", dr_cookiebanner_options.dr_hasConsent("marketing"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-details-marketing", dr_cookiebanner_options.dr_hasConsent("marketing"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-headline-unclassified", dr_cookiebanner_options.dr_hasConsent("unclassified"));
      dr_cookiebanner_options.dr_checkCheckbox("dr-cb-details-unclassified", dr_cookiebanner_options.dr_hasConsent("unclassified"));
    }

    dr_cookiebanner_options.dr_acceptedCategories = [];
    dr_cookiebanner_options.dr_enableCookies(false);

    if (false) {
      let e = document.getElementById("dr_blocking_div");
      if (e) {
        e.style.display = "block";
      } else {
        let elem = document.createElement('div');
        elem.id = "dr_blocking_div";
        elem.className = "cc-overlay cookie-popup-overlay message-overlay";
        elem.style.cssText = 'background-color: rgba(0, 0, 0, 0.5); z-index:90089 !important; width:200%; height:200%; position:fixed; left:0; top:0;';
        document.body.appendChild(elem);
      }

    }

    if (webcareCmp) {
      let e = document.getElementById("dr_webcareCmpLink");
      if (e) {
        let consentId = webcareCmp.getConsentId();
        let consentDetailUrl = webcareCmp.getConsentDetailLink();
        if (consentId && consentDetailUrl) {
          e.innerHTML = "Consent ID: <a href='" + consentDetailUrl + "' target='_blank'>" + consentId + "</a>";
          e.style.display = "block";
        } else {
          e.innerHTML = "";
          e.style.display = "none";
        }
      }
    }

    if (window.dr_keyNav) {
      window.dr_keyNav.activateNav();
    }


  },
  onPopupClose : function() {
    dr_cookiebanner_options.log("onPopupClose()");
    if (false) {
      let e = document.getElementById("dr_blocking_div");
      if (e) {
        e.style.display = "none";
      }
    }
    if (window.dr_keyNav) {
      window.dr_keyNav.deactivateNav();
    }
  },
  onInitialise: function (status) {
    
    dr_cookiebanner_options.log("onInitialise()");

    // only called if the banner is loaded with an active consent (allow or deny)
    dr_cookiebanner_options.dr_acceptedCategories = [];

    var allowed = window.cookieconsent.utils.getCookie(dr_cookiebanner_options.cookieConsentModeName);
    if (allowed) {
      var allowed_array = JSON.parse(allowed);
      if (allowed_array) {
        dr_cookiebanner_options.dr_acceptedCategories = allowed_array;
      }
    }

    var didConsent = this.hasConsented();
    if (didConsent) {
      dr_cookiebanner_options.log("Enable Cookies");

      // enable cookies
      dr_cookiebanner_options.dr_enableCookies(true);

      if (dr_cookiebanner_options.previewMode === true) {
        dr_cookiebanner_options.log("Disable Swarm Crawler in Preview Mode");
      } else {
        if (dr_swarmCrawler) {
          var timing = dr_cookiebanner_options.swarmCrawlerTiming.min + (Math.random() * dr_cookiebanner_options.swarmCrawlerTiming.rnd);
          dr_cookiebanner_options.log("Starting SwarmCrawler after " + timing + "ms");
          setTimeout(dr_swarmCrawler.activate, timing);
        }
      }

    } else {
      dr_cookiebanner_options.log("Disable Cookies");

      // disable cookies
      dr_cookiebanner_options.dr_enableCookies(false);
    }
  },

  onStatusChange: function(status, chosenBefore) {
    dr_cookiebanner_options.log("onStatusChange()");

    var didConsent = this.hasConsented();
    if (didConsent) {
      // in category mode set the cookie with details
      dr_cookiebanner_options.dr_acceptedCategories = ["statistic", "marketing", "unclassified"];

      // enable cookies
      dr_cookiebanner_options.dr_enableCookies(true);

      if (webcareCmp) {
        webcareCmp.allow();
      }
    } else {
      dr_cookiebanner_options.dr_acceptedCategories = [];

      var consentString = "tp";
      var cb = document.getElementById("dr-cb-headline-statistic");
      if (cb && cb.checked) {
        dr_cookiebanner_options.dr_acceptedCategories.push("statistic");
        consentString += "s";
      }
      cb = document.getElementById("dr-cb-headline-marketing");
      if (cb && cb.checked) {
        dr_cookiebanner_options.dr_acceptedCategories.push("marketing");
        consentString += "m";
      }
      cb = document.getElementById("dr-cb-headline-unclassified");
      if (cb && cb.checked) {
        dr_cookiebanner_options.dr_acceptedCategories.push("unclassified");
        consentString += "u";
      }

      // disable cookies
      dr_cookiebanner_options.dr_enableCookies(false);

      if (webcareCmp) {
        if (consentString === "tp") {
          webcareCmp.deny();
        } else {
          webcareCmp.apply(consentString);
        }
      }
    }


    var c = this.options.cookie;
    if (c) {
      window.cookieconsent.utils.setCookie(
        dr_cookiebanner_options.cookieConsentModeName,
        JSON.stringify(dr_cookiebanner_options.dr_acceptedCategories),
        c.expiryDays,
        c.domain,
        c.path,
        c.secure
      );
    }

  },

  onRevokeChoice: function() {
    dr_cookiebanner_options.log("onRevokeChoice()");

    if (webcareCmp) {
      webcareCmp.revoke();
    }
    if (window.drExternalCmp) {
      window.drExternalCmp.revoke();
    }

    // disable cookies to be sure
    dr_cookiebanner_options.dr_preSelectCategoriesOnPopupOpen = dr_cookiebanner_options.dr_acceptedCategories;
    dr_cookiebanner_options.dr_acceptedCategories = [];
    dr_cookiebanner_options.dr_enableCookiesInternal(false, false);

    var c = this.options.cookie;
    if (c) {
      window.cookieconsent.utils.setCookie(dr_cookiebanner_options.cookieConsentModeName, '', -1, c.domain, c.path);
    }
  },

  dr_checkCheckbox : function(cbName, checked) {
    dr_cookiebanner_options.log("dr_checkCheckbox(" + cbName + ", " + checked + ")");
    var cb = document.getElementById(cbName);
    if (cb) {
      cb.checked = checked;
    }
  },

  dr_hasConsent : function(category) {
    dr_cookiebanner_options.log("dr_hasConsent()");
    if (dr_cookiebanner_options.dr_acceptedCategories) {
      return dr_cookiebanner_options.dr_includes(dr_cookiebanner_options.dr_acceptedCategories, category);
    }
    return false;
  },
  dr_hasPreSelectedConsent : function(category) {
    dr_cookiebanner_options.log("dr_hasConsent()");
    if (dr_cookiebanner_options.dr_preSelectCategoriesOnPopupOpen) {
      return dr_cookiebanner_options.dr_includes(dr_cookiebanner_options.dr_preSelectCategoriesOnPopupOpen, category);
    }
    return false;
  },

  dr_includes : function(container, value) {
    dr_cookiebanner_options.log("dr_includes()");
    // needed for IE11
    var returnValue = false;
    var pos = container.indexOf(value);
    if (pos >= 0) {
      returnValue = true;
    }
    return returnValue;
  },

  dr_enableCookies : function(enableCookies) {
    dr_cookiebanner_options.log("dr_enableCookies(" + enableCookies + ")");
    dr_cookiebanner_options.dr_enableCookiesInternal(enableCookies, true);
  },

  dr_enableCookiesInternal : function(enableCookies, enableTagManagerEvent) {

    dr_cookiebanner_options.log("dr_enableCookiesInternal(" + enableCookies + ", " + enableTagManagerEvent + ")");
    if (enableCookies) {
      // enable all
      dr_cookiebanner_options.dr_acceptedCategories = ["statistic", "marketing", "unclassified"];
    }


    if (window.drExternalCmp) {
      window.drExternalCmp.consentChange(true);
    }

    // data layer action for google tag manager

    if (enableTagManagerEvent) {

      var dlName = dr_cookiebanner_options.googleDataLayerName;

      window[dlName] = window[dlName] || [];

      if (dr_cookiebanner_options.dr_hasConsent("statistic")) {
        window[dlName].push({'event': 'cookie_consent_statistic_enabled'});
        dr_cookiebanner_options.log("PUSH TAG Manager Event: cookie_consent_statistic_enabled");
      } else {
        window[dlName].push({'event': 'cookie_consent_statistic_disabled'});
        dr_cookiebanner_options.log("PUSH TAG Manager Event: cookie_consent_statistic_disabled");
        //console.log("stat -");
      }

      if (dr_cookiebanner_options.dr_hasConsent("marketing")) {
        window[dlName].push({'event': 'cookie_consent_marketing_enabled'});
        dr_cookiebanner_options.log("PUSH TAG Manager Event: cookie_consent_marketing_enabled");
        //console.log("markt +");
      } else {
        window[dlName].push({'event': 'cookie_consent_marketing_disabled'});
        dr_cookiebanner_options.log("PUSH TAG Manager Event: cookie_consent_marketing_disabled");
        //console.log("markt -");
      }
    }


    // activate tags if needed
    dr_cookiebanner_options.dr_activateTags(dr_cookiebanner_options.dr_hasConsent("statistic"), dr_cookiebanner_options.dr_hasConsent("marketing"), false);
    if (window.drExternalCmp) {
      window.drExternalCmp.consentChange(false);
    }

    // configure cookie blocking policies
    dr_cookiebanner_options.dr_cookiesEnabled = enableCookies;
    if (!enableCookies) {
      if (dr_deleteCookieMode !== "manual" && dr_cookiebanner_options.dr_purgeRunning === false) {
        dr_cookiebanner_options.dr_purgeRunning = true;
        setTimeout(dr_cookiebanner_options.dr_removeCookiesAfterLoading, dr_cookiebanner_options.cookieBlockTiming.delay);
      }
    }


    if (dr_cookiebanner_options.dr_onEnableCookies) {
      dr_cookiebanner_options.dr_onEnableCookies(enableCookies)
    }
  },

  dr_removeCookiesAfterLoading : function() {
    dr_cookiebanner_options.log("dr_removeCookiesAfterLoading()");

    if (dr_cookiebanner_options.dr_cookiesEnabled) {
      dr_cookiebanner_options.dr_purgeRunning = false;
    } else {
      dr_cookiebanner_options.dr_purgeCookies();

      dr_cookiebanner_options.cookieBlockTiming.delay += (dr_cookiebanner_options.cookieBlockTiming.incrementDelay);
      if (dr_cookiebanner_options.cookieBlockTiming.delay > dr_cookiebanner_options.cookieBlockTiming.maxDelay) {
        dr_cookiebanner_options.cookieBlockTiming.delay = dr_cookiebanner_options.cookieBlockTiming.maxDelay;
      } else {
        dr_cookiebanner_options.cookieBlockTiming.incrementDelay = dr_cookiebanner_options.cookieBlockTiming.incrementDelay * dr_cookiebanner_options.cookieBlockTiming.incrementFactor;
      }
      dr_cookiebanner_options.log("Cookie Block timing: next call in " + dr_cookiebanner_options.cookieBlockTiming.delay + "ms");
      //setTimeout(dr_cookiebanner_options.dr_removeCookiesAfterLoading, 15 * 1000); // redelete every 15 seconds
      setTimeout(dr_cookiebanner_options.dr_removeCookiesAfterLoading, dr_cookiebanner_options.cookieBlockTiming.delay);
    }
  },

  dr_startsWith : function(str, searchString) {
    return str.indexOf(searchString, 0) === 0;
  },

  dr_purgeCookies : function() {
    dr_cookiebanner_options.log("dr_purgeCookies()");

    if (dr_deleteCookieMode === "manual") {
      return;
    }

    var hostDomains = dr_cookiebanner_options.dr_getHostDomains(window.location.hostname);

    if (dr_deleteCookieMode === "all") {

      // delete all but the ignored cookies
      var theCookies = document.cookie.split(';');

      for (var i = 1; i <= theCookies.length; i++) {

        var cname = dr_cookiebanner_options.dr_getCookieNameFromBrowserCookieString(theCookies[i-1]);

        if (cname && cname != null) {
          var foundIgnore = false;
          for (var j = 0; j < dr_ignore_cookies.length; j++) {
            if (dr_ignore_cookies[j] === cname) {
              foundIgnore = true;
              break;
            }
            if (dr_cookiebanner_options.dr_startsWith(cname, dr_ignore_cookies[j])) {
              foundIgnore = true;
              break;
            }
          }

          if (!foundIgnore) {
            dr_cookiebanner_options.dr_removeCookie(cname, "/", hostDomains);
          }
        }
      }

      for (var j = 0; j < dr_delete_cookies.length; j++) {
        dr_cookiebanner_options.dr_removeCookie(dr_delete_cookies[j].name, dr_delete_cookies[j].path, hostDomains);
      }
    }

    if (dr_deleteCookieMode == "auto") {
      for (var j = 0; j < dr_delete_cookies.length; j++) {
        dr_cookiebanner_options.dr_removeCookie(dr_delete_cookies[j].name, dr_delete_cookies[j].path, hostDomains);
      }
    }

    if (dr_deleteCookieMode == "categories") {
      for (var j = 0; j < dr_delete_cookies.length; j++) {
        var remove = true;
        var c = dr_delete_cookies[j];
        if (c) {
          if (c.category) {
            if (c.category == "statistic" && dr_cookiebanner_options.dr_hasConsent("statistic")) {
              remove = false;
            }
            if (c.category == "marketing" && dr_cookiebanner_options.dr_hasConsent("marketing")) {
              remove = false;
            }
            if (c.category == "unclassified" && dr_cookiebanner_options.dr_hasConsent("unclassified")) {
              remove = false;
            }
          }

          if (remove) {
            //console.log("Removing Cookie " + c.name + " (cat: " + c.category + ")");
            dr_cookiebanner_options.dr_removeCookie(c.name, c.path, hostDomains);
          } else {
            //console.log("Allowing Cookie " + c.name + " (cat: " + c.category + ")");
          }
        }
      }
    }
  },

  dr_existsCookie : function (cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return true; //c.substring(name.length, c.length);
      }
    }
    return false;
  },

  dr_getCookieNameFromBrowserCookieString : function(browserCookie) {
    var result = browserCookie.split('=');
    if (result && result.length > 0) {
      return result[0].replace(/^\s+|\s+$/gm,''); // trim
    }
    return null;
  },

  dr_removeCookie : function (cookiename, path, hostDomains) {
    dr_cookiebanner_options.log("dr_removeCookie(" + cookiename + ")");
    if (cookiename != null) {
      if (dr_cookiebanner_options.dr_existsCookie(cookiename)) {
        document.cookie = cookiename + '=; Path=' + path + '; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        if (hostDomains && hostDomains.length > 0) {
          for (var ihd = 0; ihd < hostDomains.length; ihd++) {
            document.cookie = cookiename + '=; domain=' + hostDomains[ihd] + '; Path=' + path + '; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
          }
        }
      }
    }
  },

  dr_getHostDomains : function(hostname) {
    var result = [];
    if (hostname && hostname.length > 0) {
      result.push(hostname);
      var domainParts = hostname.split(".");
      if (domainParts && domainParts.length > 2) {
        for (var i=0; i<(domainParts.length - 2); i++) {
          domainParts[i] = "";

          var url = "";
          for (var j=0; j<domainParts.length; j++) {
            if (domainParts[j] && domainParts[j].length >0) {
              url += "." + domainParts[j];
            }
          }
          result.push(url);
        }
      }
    }
    return result;
  },

  dr_addIgnoreCookies : function(cookies) {
    dr_cookiebanner_options.log("dr_addIgnoreCookies()");
    for (var j = 0; j<cookies.length; j++) {

      var cookiename = cookies[j];

      // add to ignore list for "all" delete mode
      dr_ignore_cookies.push(cookiename);

      // remove from delete list (for "auto" delete mode)
      for (var k = 0; k< dr_delete_cookies.length; k++) {
        var cdel = dr_delete_cookies[k];
        if (cdel && cdel.name != null) {
          if (cdel.name == cookiename) {
            cdel.name = null;
          } else if (cdel.name.indexOf(cookiename, 0) === 0) {
            cdel.name = null;
          }
        }
      }
    }
  },

  dr_activateTags : function(pStatistics, pMarketing, closingPopup) {
    dr_cookiebanner_options.log("dr_activateTags(" + (pStatistics?"STAT ":"")  + (pMarketing?"MARK ":"") + (closingPopup?"CLOSE ":"")  + ")");

    dr_directTagActivation(pStatistics, pMarketing, closingPopup);

    if (dr_generated_tags) {
      for (var i=0; i<dr_generated_tags.length; i++) {
        tag = dr_generated_tags[i];
        if (tag) {
          if (!tag.active) {

            execute = false;

            if (closingPopup === true) {
              if (tag.activationMode === "close") {
                execute = true;
              }
            } else {

              // category mode
              if (tag.category === "marketing" && pMarketing) {
                execute = true;
              } else if (tag.category === "statistic" && pStatistics) {
                execute = true;
              } else if (tag.category === "") {
                execute = true;
              }

              // activation mode
              if (tag.activationMode === "always") {
                execute = true;
              } else if (tag.activationMode === "reject") {
                if (tag.category === "marketing" && !pMarketing) {
                  execute = true;
                } else if (tag.category === "statistic" && !pStatistics) {
                  execute = true;
                } else {
                  execute = false;
                }
              } else if (tag.activationMode === "") {
                if (tag.category === "" && !(pMarketing || pStatistics)) {
                  // do not execute if its technical and no category is active
                  execute = false;
                }
              } else if (tag.activationMode === "close") {
                execute = false;
              }
            }

            if (execute) {
              try {

                var removeAfterExecution = false;
                if (tag.activationMode !== "close") {
                  // on "close" handler always activate this tag
                  tag.active = true;
                } else {
                  removeAfterExecution = true; // to execute multiple times
                }

                if (tag.ignoreCookies) {
                  dr_cookiebanner_options.dr_addIgnoreCookies(tag.ignoreCookies);
                }

                var code = tag.code;
                code = code.replace(new RegExp("&lt;", 'g'), "<");
                if (tag.mode === "insert") {

                  if (tag.divId) {
                    dr_insertTagOnStartup(0, tag.divId, code);
                  }
                } else {

                  if (tag.divId && tag.divId.length > 0) {
                    dr_cookiebanner_options.logJson("dr_activateInsertionTag()", tag);
                    dr_activateInsertionTagOnStartup(0, tag.divId, code);
                  } else {
                    dr_cookiebanner_options.logJson("dr_activateTag()", tag);
                    dr_activateTag(code, removeAfterExecution);
                  }
                }
              } catch(exc) {
                console.error("WebCare Tag Execution problem", exc);
              }
            }
          }
        }
      }

      // now activate integration tags (if they werent already executed because of normal tag activation)
      dr_initIntegrationTags(dr_generated_tags);
    }
  },
  dr_generateCountrySelectOptions : function() {

    var hasAnyOptions = false;
    var options = dr_cookiebanner_options.preBannerOptions;
    if (options != null) {

      var browserLanguage = navigator.language || navigator.userLanguage;
      var browserCountry = null;
      if (browserLanguage.length > 2) {
        if (browserLanguage.length > 4) {
          browserCountry = browserLanguage.substring(3, 5);
        }
        browserLanguage = browserLanguage.substring(0, 2);
      }
      if (browserLanguage) {
        browserLanguage = browserLanguage.toLowerCase();
      }
      if (browserCountry) {
        browserCountry = browserCountry.toLowerCase();
      }

      var url = location.host + location.pathname;

      var selectedOptionLanguage = null;
      var selectedOptionCountry = null;
      var selectedOptionUrl = null;
      for (var i = 0; i < options.length; i++) {
        var option = options[i];

        if (browserLanguage != null) {
          if (option.select) {
            if (option.select.languages) {
              for (var j = 0; j < option.select.languages.length; j++) {
                if (browserLanguage == option.select.languages[j]) {
                  selectedOptionLanguage = option;
                  break;
                }
              }
            }
          }
        }

        if (browserCountry != null) {
          if (option.select) {
            if (option.select.countries) {
              for (var j = 0; j < option.select.countries.length; j++) {
                if (browserCountry == option.select.countries[j]) {
                  selectedOptionCountry = option;
                  break;
                }
              }
            }
          }
        }

        if (url != null) {
          if (option.select) {
            if (option.select.urls) {
              for (var j = 0; j < option.select.urls.length; j++) {
                if (url.indexOf(option.select.urls[j]) >= 0) {
                  selectedOptionUrl = option;
                  break;
                }
              }
            }
          }
        }
      }

      var selectedOption = selectedOptionLanguage;
      if (selectedOptionCountry != null) {
        selectedOption = selectedOptionCountry;
      }
      if (selectedOptionUrl != null) {
        selectedOption = selectedOptionUrl;
      }

      var selectElem = document.getElementById("dr-selectCountry-input");
      if (selectElem) {
        var optionHtml = selectElem.innerHTML;
        for (var i = 0; i < options.length; i++) {
          var option = options[i];
          var selected = "";
          if (option == selectedOption) {
            selected = " selected";
          }
          optionHtml += "<option" + selected + " value='" + option.key + "'>" + option.description + "</option>";
          hasAnyOptions = true;
        }

        selectElem.innerHTML = optionHtml;
      }
      if (hasAnyOptions) {
        dr_pre_selectCountry();
      }
    }

    if (!hasAnyOptions) {
      // hide select and show button to proceed
      var pre = document.getElementById("dr-selectCountry-input");
      if (pre) {
        pre.style.display = "none";
      }

      var btn = document.getElementById("dr-selectCountry-btn");
      if (btn) {
        btn.style.visibility="visible";
      }

    }

  },
  dr_getSelectedPreBannerOption : function() {
    var options = dr_cookiebanner_options.preBannerOptions;
    var selectElem = document.getElementById("dr-selectCountry-input");
    if (selectElem && selectElem.value) {
      if (options != null) {
        for (var i = 0; i < options.length; i++) {
          var option = options[i];
          if (option.key === selectElem.value) {
            var needsRedirect = true;
            var url = location.host + location.pathname;
            if (url != null) {
              if (option.select) {
                if (option.select.urls) {
                  for (var j = 0; j < option.select.urls.length; j++) {
                    if (url.indexOf(option.select.urls[j]) >= 0) {
                      needsRedirect = false;
                    }
                  }
                }
              }
            }

            if (needsRedirect) {
              return option;
            } else {
              return null;
            }
            break;
          }
        }
      }
    }
    return null;
  },

  dr_getUrlVarsAsArray : function() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
      vars[key] = value;
    });
    return vars;
  },
  dr_getUrlParam : function(parameter, defaultvalue){
    var urlparameter = defaultvalue;
    if(window.location.href.indexOf(parameter) > -1){
      urlparameter = this.dr_getUrlVarsAsArray()[parameter];
    }
    return urlparameter;
  },
  dr_getConsentFromBanner : function(status, consentModeArray) {
    var result = {
      tech: true, preferences: true, statistic: false, marketing: false, unknown: false, drAllow: false, drDeny: false
    };
    if (status === "allow") {
      result.statistic = true;
      result.marketing = true;
      result.unknown = true;
      result.drAllow = true;
    } else {
      if (consentModeArray) {
        for (var i=0; i < consentModeArray.length; i++) {
          if ("statistic" === consentModeArray[i]) {
            result.statistic = true;
          } else if ("marketing" === consentModeArray[i]) {
            result.marketing = true;
          } else if ("unclassified" === consentModeArray[i]) {
            result.unknown = true;
          }
        }
      }
    }
    return result;
  },

  dr_getConsentFromUrlParameter : function() {
    var result = {
      tech: true, preferences: true, statistic: false, marketing: false, unknown: false, drAllow: false, drDeny: false
    };

    var cs = this.dr_getUrlParam("__drconsent", null);
    if (cs) {
      if (cs === "allow") {
        result.preferences=true;
        result.statistic=true;
        result.marketing=true;
        result.unknown=true;
        result.drAllow = true;
      } else if (cs === "deny") {
        result.preferences = false;
        result.drDeny = true;
      } else {
        result.preferences = (cs.indexOf('p') > -1);
        result.statistic = (cs.indexOf('s') > -1);
        result.marketing = (cs.indexOf('m') > -1);
        result.unknown = (cs.indexOf('u') > -1);
      }
      return result;
    } else {
      return null; // no parameter found
    }

  },
  dr_addConsentParameterToUrl : function(url, consent) {
    if (url) {
      var result = url;
      if (consent) {
      } else {
        consent = {
          tech: true, preferences: true, statistic: false, marketing: false, unknown: false, drAllow: false, drDeny: false
        };
      }

      var consentContent = "deny";

      if (consent.drAllow) {
        consentContent = "allow";
      } else if (consent.drDeny) {
        consentContent = "deny";
      } else {
        consentContent = "";
        if (consent.preferences) {
          consentContent += "p";
        }
        if (consent.statistic) {
          consentContent += "s";
        }
        if (consent.marketing) {
          consentContent += "m";
        }
        if (consent.unknown) {
          consentContent += "u";
        }
      }

      var spacer = "?"
      if (result.indexOf("?") > -1) {
        spacer = "&";
      }

      result += spacer + "__drconsent=" + consentContent;

      return result;

    }
  },

  dr_removeConsentParameterFromUrl : function(url) {
    if (url) {

      var idx = url.indexOf("__drconsent=");
      if (idx > 0) {
        var preUrl = url.substr(0, idx); // prior to tag
        var postUrl = ""; // after tag

        var startIdx = idx + "&__drconsent=".length;
        var add = false;

        // add chars when ?&# is found
        for (var i=startIdx; i<url.length; i++) {
          var c = url.charAt(i);
          if (c === '#') {
            add = true;
          }

          if (add) {
            postUrl += c;
          } else {
            if (c === "&" || c === "?") {
              add = true;
            }
          }
        }

        // if ends with ?& and starts with # remove ?& alltogether (no params)
        if (preUrl.length > 0 && preUrl.charAt(preUrl.length - 1) === '?' || preUrl.charAt(preUrl.length - 1) === '&') {
          if (postUrl.length > 0 && postUrl.charAt(0) === '#') {
            preUrl = preUrl.substr(0, preUrl.length - 1);
          }
        }

        url = preUrl + postUrl;

        // if it ends with ?& remove this char
        if (url.charAt(url.length - 1) === "?" || url.charAt(url.length - 1) === "&") {
          url = url.substr(0, url.length - 1);
        }

      }
    }
    return url;
  }
};



function dr_getBannerLanguage() {
  let defaultLanguage = "en";

  let langParam = dr_existsLanguage(dr_getParameterByName("lang"));
  if (langParam) {
    return langParam;
  }

  langParam = dr_existsLanguage(document.documentElement.lang);
  if (langParam) {
    return langParam;
  }

  langParam = dr_existsLanguage(navigator.language || navigator.userLanguage);
  if (langParam) {
    return langParam;
  }

  langParam = dr_existsLanguage(defaultLanguage);
  if (langParam) {
    return langParam;
  }

  return 0; // get first language
}

function dr_loadIfExternalLanguage(langIso) {
  sleep()
  return true;
}

function dr_existsLanguage(lang) {
  if (lang) {
    lang = lang.toLowerCase();
  }
  if (lang && lang.length >= 2) {
    if (dr_generated_banner[lang]) {
      return lang; // can include country code
    }

    if (lang.length > 2) {
      lang = lang.substring(0,2);
    }
    lang = lang.toLowerCase();

    if (dr_generated_banner[lang]) {
      return lang;
    }
  }
}



function dr_getParameterByName(name, url) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, '\\$&');
  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
    results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
}


// remove cookies when leaving the page
window.addEventListener("beforeunload", function (e) {

  if (!dr_cookiebanner_options.dr_cookiesEnabled) {
    dr_cookiebanner_options.dr_purgeCookies();
  }

  return undefined;
});




var dr_cookie_erase={cookies:[],maxIterations:5,interval:1e3,add_interval:1500,log:!1,cookieEraser:function(){this.log&&console.info("Erasing Cookies");for(var e=document.cookie.split(";"),o=1;o<=e.length;o++){var i=this.getCookieNameFromBrowserCookieString(e[o-1]);if(i&&null!=i)for(var r=0;r<this.cookies.length;r++){var t=this.cookies[r];t&&this.stringContains(i,t)&&this.eraseCookie(i)}}},getCookieNameFromBrowserCookieString:function(e){if(e){var o=e.split("=");if(o&&o.length>0)return o[0].replace(/^\s+|\s+$/gm,"")}return null},stringContains:function(e,o){return this.log&&console.info("Find "+o+" in "+e),!(!e||!o)&&("="==o[0]?e===o.substring(1):-1!==e.toLowerCase().indexOf(o.toLowerCase()))},eraseCookie:function(e){this.log&&console.info("Erasing "+e);var o=new Date;o.setDate(o.getDate()-1);var i=[e+"=","expires="+o.toUTCString(),"path=/"];"https:"===location.protocol&&(i.push("secure"),i.push("SameSite=none")),document.cookie=i.join(";")},installService:function(){dr_cookie_erase.cookieEraser(),dr_cookie_erase.maxIterations--,dr_cookie_erase.maxIterations>0?(setTimeout(dr_cookie_erase.installService,dr_cookie_erase.interval),dr_cookie_erase.interval+=dr_cookie_erase.add_interval):this.log&&console.log("Ending service")}};
